{"version":3,"sources":["NavBar/MenuItems.js","assets/img/logo.svg","NavBar/NavBar.js","ethereumFunctions.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","CoinSwapper/InputDialog.js","Components/LoadingButton.js","Components/SplitButton.js","Liquidity/components/InputField.js","constants/events.js","CoinSwapper/Stepper.js","CoinSwapper/CoinSwapper.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/components/Stepper.js","Liquidity/MintBurnLiquidity.js","Liquidity/Liquidity.js","Components/connectWalletPage.js","Oracle/LiquidityFunctions.js","Oracle/OracleDeployer.js","Oracle/Oracle.js","NavBar/VerticalBar.js","NavBar/Drawer.js","App.js","reportWebVitals.js","index.js"],"names":["MenuItems","title","url","cName","Component","ERC20","require","EVENT","CORE","getProvider","ethers","providers","Web3Provider","window","ethereum","getSigner","provider","getWeth","address","signer","Contract","abi","doesTokenExist","err","amount","coreAddress","eventAddress","a","console","log","time","Math","floor","Date","now","BigNumber","from","amountIn","utils","parseEther","toString","coreContract","mintPositions","burnPositions","redeemPositions","eventUniAddress","uniContract","swap","event","triggger","name","duration","oracleAddress","assetAddress","settleRatio","tokenRatio","deployEvent","useStyles","makeStyles","theme","container","padding","spacing","minHeight","backgroundColor","COLORS","borderRadius","borderColor","borderWidth","borderStyle","container_input","marginLeft","textAlign","container_blank","grid","height","fab","zIndex","input","typography","h5","width","inputBase","CoinField","props","classes","onClick","symbol","value","onChange","activeField","placeholder","className","Grid","direction","justifyContent","alignItems","item","xs","Fab","size","variant","InputBase","undefined","disabled","root","button","paddingTop","paddingBottom","coinName","opacity","CoinButton","coinAbbr","ButtonBase","focusRipple","Typography","styles","dialogContainer","titleSection","titleText","alignSelf","hr","margin","paddingLeft","paddingRight","coinList","overflowY","coinContainer","marginTop","overflow","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","MuiDialogActions","DialogTitle","DialogActions","InputDialog","open","events","heading","isPasteAddress","React","useState","setAddress","error","setError","exit","Dialog","fullWidth","maxWidth","paper","TextField","e","target","helperText","map","index","array","Button","autoFocus","color","wrapper","position","progress","green","top","left","LoadingButton","loading","valid","success","fail","type","CircularProgress","SplitButton","options","setOpen","anchorRef","selectedIndex","setSelectedIndex","handleClose","current","contains","ButtonGroup","ref","aria-controls","aria-expanded","aria-haspopup","prevOpen","Popper","sx","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","ClickAwayListener","onClickAway","MenuList","id","autoFocusItem","dense","option","MenuItem","selected","handleMenuItemClick","ListItemText","ml","InputField","USDC","DEADLINE","EVENTADDR","exchnge","ORACLE","ALLEVENTS","QontoConnector","styled","StepConnector","stepConnectorClasses","alternativeLabel","right","active","line","completed","palette","mode","grey","borderTopWidth","QontoStepIconRoot","ownerState","display","fontSize","QontoStepIcon","steps","HorizontalLinearStepper","activeStep","Set","Box","mb","Stepper","connector","label","Step","StepLabel","StepIconComponent","length","mt","flexDirection","pt","flex","paperContainer","switchButton","marginBottom","balance","footer","CoinSwapper","enqueueSnackbar","useSnackbar","setEventAddress","exchangeAddress","setExchangeAddress","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","dialog3Open","setDialog3Open","setActiveStep","isSelected","input1","setInput1","input2","setInput2","input3","setInput3","field1Value","setField1Value","field2Value","setField2Value","field3Value","setField3Value","field4Value","setField4Value","setLoading","handleChange","field4","inp","EVENTS","Container","Paper","getAddress","buy","parseFloat","then","catch","message","autoHideDuration","sell","trigger","background","values","buttonIcon","marginRight","LiquidityRemover","MintBurnLiquid","field1","burnOption","burn","mint","redeem","Liquidity","ConnectWalletPage","src","logo","href","paperContainer1","OracleDeployer","field5Value","setField5Value","field6Value","setField6Value","field2","field3","field5","field6","sm","Oracle","createTheme","primary","light","main","dark","contrastText","secondary","drawerWidth","PermanentDrawerLeft","CssBaseline","AppBar","Toolbar","noWrap","component","Drawer","flexShrink","boxSizing","anchor","Divider","Tab","fontWeight","fontFamily","textTransform","Link","to","flexGrow","bgcolor","p","App","maxSnack","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6lwgBAAaA,EAAY,CACvB,CACEC,MAAO,cACPC,IAAK,gBACLC,MAAO,aAGT,CACEF,MAAO,oBACPC,IAAK,WACLC,MAAO,aAET,CACEF,MAAO,mBACPC,IAAK,cACLC,MAAO,cCfI,MAA0B,iC,mBCMpBC,Y,8GCHfC,GADSC,EAAQ,KACTA,EAAQ,MAGhBC,GAFUD,EAAQ,KACXA,EAAQ,KACPA,EAAQ,MAChBE,EAAOF,EAAQ,KAEd,SAASG,IACd,OAAO,IAAIC,IAAOC,UAAUC,aAAaC,OAAOC,UAG3C,SAASC,EAAUC,GACxB,OAAOA,EAASD,YAeX,SAASE,EAAQC,EAASC,GAC/B,OAAO,IAAIC,IAASF,EAASb,EAAMgB,IAAKF,GAkBnC,SAASG,EAAeJ,EAASC,GACtC,IACE,OAAO,IAAIC,IAASF,EAASb,EAAMgB,IAAKF,GACxC,MAAOI,GACP,OAAO,G,4CAiLJ,WACHC,EACAC,EACAC,EACAP,GAJG,mBAAAQ,EAAA,6DAMLC,QAAQC,IAAIH,GAENI,EAAOC,KAAKC,MAAMC,KAAKC,MAAQ,KAAQ,IAC5BxB,IAAOyB,UAAUC,KAAKN,GAEjCO,EAAW3B,IAAO4B,MAAMC,WAAWf,EAAOgB,YAChDZ,QAAQC,IAAIQ,GAMZT,QAAQC,IAAI,UAENY,EAAe,IAAIrB,IAASK,EAAajB,EAAKa,IAAKF,GACzDS,QAAQC,IAAI,UArBP,UAuBGY,EAAaC,cACfhB,EACAW,GAzBD,QA2BHT,QAAQC,IAAI,WA3BT,6C,kEA+BA,WACHL,EACAC,EACAC,EACAP,GAJG,mBAAAQ,EAAA,6DAMLC,QAAQC,IAAIH,GAENI,EAAOC,KAAKC,MAAMC,KAAKC,MAAQ,KAAQ,IAC5BxB,IAAOyB,UAAUC,KAAKN,GAEjCO,EAAW3B,IAAO4B,MAAMC,WAAWf,EAAOgB,YAChDZ,QAAQC,IAAIQ,GAMZT,QAAQC,IAAI,UAENY,EAAe,IAAIrB,IAASK,EAAajB,EAAKa,IAAKF,GACzDS,QAAQC,IAAI,UArBP,UAuBCY,EAAaE,cACfjB,EACAW,GAzBC,QA2BLT,QAAQC,IAAI,WA3BP,6C,kEA+BA,WACHJ,EACAC,EACAP,GAHG,iBAAAQ,EAAA,6DAKLC,QAAQC,IAAIH,GAENI,EAAOC,KAAKC,MAAMC,KAAKC,MAAQ,KAAQ,IAC5BxB,IAAOyB,UAAUC,KAAKN,GAGvCF,QAAQC,IAAI,UAENY,EAAe,IAAIrB,IAASK,EAAajB,EAAKa,IAAKF,GACzDS,QAAQC,IAAI,UAdP,SAgBCY,EAAaG,gBACflB,GAjBC,OAmBLE,QAAQC,IAAI,WAnBP,4C,kEAuBA,WACHL,EACAqB,EACA1B,GAHG,mBAAAQ,EAAA,6DAMCG,EAAOC,KAAKC,MAAMC,KAAKC,MAAQ,KAAQ,IAC5BxB,IAAOyB,UAAUC,KAAKN,GAEjCO,EAAW3B,IAAO4B,MAAMC,WAAWf,EAAOgB,YAChDZ,QAAQC,IAAIQ,GAMZT,QAAQC,IAAI,UAENiB,EAAc,IAAI1B,IAASyB,EAAiBrC,EAAKa,IAAKF,GAC5DS,QAAQC,IAAI,UAnBP,SAqBCiB,EAAYC,KACdV,GAtBC,OAwBLT,QAAQC,IAAI,WAxBP,6C,kEA4BA,WACHL,EACAqB,EACA1B,GAHG,mBAAAQ,EAAA,6DAMCG,EAAOC,KAAKC,MAAMC,KAAKC,MAAQ,KAAQ,IAC5BxB,IAAOyB,UAAUC,KAAKN,GAEjCO,EAAW3B,IAAO4B,MAAMC,WAAWf,EAAOgB,YAChDZ,QAAQC,IAAIQ,GAMZT,QAAQC,IAAI,UAENiB,EAAc,IAAI1B,IAASyB,EAAiBrC,EAAKa,IAAKF,GAC5DS,QAAQC,IAAI,UAnBP,SAqBCiB,EAAYC,KACdV,GAtBC,OAwBLT,QAAQC,IAAI,WAxBP,6C,kEA2BA,WACHJ,EACAC,EACAP,GAHG,eAAAQ,EAAA,6DAKCqB,EAAQ,IAAI5B,IAASM,EAAcnB,EAAMc,IAAKF,GAL/C,SAMgB6B,EAAMC,UAAS,GAN/B,0D,kEASA,WACHC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA9B,EACAN,GARG,eAAAQ,EAAA,6DAaCc,EAAc,IAAIrB,IAASK,EAAajB,EAAKa,IAAKF,GAbnD,SAcgBsB,EAAae,YAAYN,EAAMC,EAAUC,EAAeC,EAAcC,EAAaC,GAdnG,0D,+ECpXDE,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTC,QAASF,EAAMG,QAAQ,GACvBC,UAAW,OACXC,gBAAiBC,IAAY,IAC7BC,aAAcP,EAAMG,QAAQ,GAC5BK,YAAaF,IAAY,KACzBG,YAAa,MACbC,YAAa,SAEfC,gBAAiB,CACfT,QAASF,EAAMG,QAAQ,GACvBC,UAAW,OACXC,gBAAiBC,IAAY,IAC7BC,aAAcP,EAAMG,QAAQ,GAC5BK,YAAaF,IAAY,KACzBG,YAAa,MACbC,YAAa,QACbE,WAAY,MACZC,UAAW,SAEbC,gBAAiB,CACfZ,QAASF,EAAMG,QAAQ,GACvBC,UAAW,OACXG,aAAcP,EAAMG,QAAQ,IAE9BY,KAAM,CACJC,OAAQ,QAEVC,IAAK,CACHC,OAAQ,KAEVC,MAAM,2BACDnB,EAAMoB,WAAWC,IADjB,IAEHC,MAAO,SAETC,UAAW,CACTV,UAAW,aAmGA,SAASW,EAAUC,GAQhC,IAAMC,EAAU5B,IACR6B,EAA+DF,EAA/DE,QAASC,EAAsDH,EAAtDG,OAAQC,EAA8CJ,EAA9CI,MAAOC,EAAuCL,EAAvCK,SAAUC,EAA6BN,EAA7BM,YAAaC,EAAgBP,EAAhBO,YAEvD,OACE,qBAAKC,UAAWP,EAAQzB,UAAxB,SACE,eAACiC,EAAA,EAAD,CACEjC,WAAS,EACTkC,UAAU,MACVC,eAAe,gBACfC,WAAW,SACXJ,UAAWP,EAAQX,KALrB,UAQE,cAACmB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACE,eAACC,EAAA,EAAD,CACEC,KAAK,QACLC,QAAQ,WACRf,QAASA,EACTM,UAAWP,EAAQT,IAJrB,UAMGW,EACD,cAAC,IAAD,SAKJ,cAACM,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACE,cAACI,EAAA,EAAD,CACEd,MAAOA,EACPC,SAAUA,EACVE,iBAA2BY,IAAdZ,EAAwBA,EAAYnD,WAAW,MAC5DgE,UAAWd,EACXL,QAAS,CAAEoB,KAAMpB,EAAQP,MAAOA,MAAOO,EAAQH,oB,8GCjLrDzB,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+C,OAAQ,CACNzB,MAAO,OACP0B,WAAYhD,EAAMG,QAAQ,IAC1B8C,cAAejD,EAAMG,QAAQ,IAC7B,0BAA2B,CACzBE,gBAAiBC,IAAY,OAGjC4C,SAAU,CACRC,QAAS,QAUE,SAASC,GAAW3B,GACjC,IAAQyB,EAA0CzB,EAA1CyB,SAAUG,EAAgC5B,EAAhC4B,SAAU1B,EAAsBF,EAAtBE,QACtBD,GADN,YAAkDD,EAAlD,mCACgB3B,MAEhB,OACE,cAACwD,GAAA,EAAD,CAAYC,aAAW,EAACtB,UAAWP,EAAQqB,OAAQpB,QAASA,EAA5D,SACE,eAACO,EAAA,EAAD,CAAMjC,WAAS,EAACkC,UAAU,SAA1B,UACE,cAACqB,EAAA,EAAD,CAAYd,QAAQ,KAApB,SAA0BW,IAC1B,cAACG,EAAA,EAAD,CAAYd,QAAQ,QAAQT,UAAWP,EAAQwB,SAA/C,SACGA,SCfX,IAAMO,GAAS,SAACzD,GAAD,MAAY,CACzB0D,gBAAiB,CACfnD,aAAcP,EAAMG,QAAQ,IAE9BwD,aAAc,CACZzD,QAASF,EAAMG,QAAQ,IAEzByD,UAAW,CACTC,UAAW,UAEbC,GAAI,CACFC,OAAQ,GAEVxG,QAAS,CACPyG,YAAahE,EAAMG,QAAQ,KAC3B8D,aAAcjE,EAAMG,QAAQ,KAC5B8C,cAAejD,EAAMG,QAAQ,IAE/B+D,SAAU,CACRlD,OAAQ,QACRmD,UAAW,UAEbC,cAAe,CACbJ,YAAahE,EAAMG,QAAQ,IAC3B8D,aAAcjE,EAAMG,QAAQ,IAC5B6C,WAAYhD,EAAMG,QAAQ,GAC1BkE,UAAWrE,EAAMG,QAAQ,GACzBmE,SAAU,YAIIvE,YAAW0D,IAGTc,YAAWd,GAAXc,EAAmB,SAAC9C,GACtC,IAAQ+C,EAAyC/C,EAAzC+C,SAAU9C,EAA+BD,EAA/BC,QAAS+C,EAAsBhD,EAAtBgD,QAAYC,EAAvC,YAAiDjD,EAAjD,kCACA,OACE,cAAC,KAAD,yBACEkD,mBAAiB,EACjB1C,UAAWP,EAAQiC,cACfe,GAHN,aAKE,eAACxC,EAAA,EAAD,CACEjC,WAAS,EACTkC,UAAU,MACVC,eAAe,gBACfwC,aAAa,SAJf,UAME,cAACpB,EAAA,EAAD,CAAYd,QAAQ,KAAKT,UAAWP,EAAQkC,UAA5C,SACGY,IAEFC,EACC,cAACI,EAAA,EAAD,CAAYC,aAAW,QAAQnD,QAAS8C,EAAxC,SACE,cAAC,KAAD,MAEA,cAOUF,aAAW,SAACvE,GAAD,MAAY,CAC3C8C,KAAM,CACJiB,OAAQ,EACR7D,QAASF,EAAMG,QAAQ,GACvBE,gBAAiBC,IAAY,SAJXiE,CAMlBQ,MCpEJ,IAAMtB,GAAS,SAACzD,GAAD,MAAY,CACvB0D,gBAAiB,CACbnD,aAAcP,EAAMG,QAAQ,IAEhCwD,aAAc,CACVzD,QAASF,EAAMG,QAAQ,IAE3ByD,UAAW,CACPC,UAAW,UAEfC,GAAI,CACAC,OAAQ,GAEZxG,QAAS,CACLyG,YAAahE,EAAMG,QAAQ,KAC3B8D,aAAcjE,EAAMG,QAAQ,KAC5B8C,cAAejD,EAAMG,QAAQ,IAEjC+D,SAAU,CACNlD,OAAQ,QACRmD,UAAW,UAEfC,cAAe,CACXJ,YAAahE,EAAMG,QAAQ,IAC3B8D,aAAcjE,EAAMG,QAAQ,IAC5B6C,WAAYhD,EAAMG,QAAQ,GAC1BkE,UAAWrE,EAAMG,QAAQ,GACzBmE,SAAU,YAIZxE,GAAYC,YAAW0D,IAGvBuB,GAAcT,YAAWd,GAAXc,EAAmB,SAAC9C,GACpC,IAAQ+C,EAAyC/C,EAAzC+C,SAAU9C,EAA+BD,EAA/BC,QAAS+C,EAAsBhD,EAAtBgD,QAAYC,EAAvC,YAAiDjD,EAAjD,kCACA,OACI,cAAC,KAAD,yBACIkD,mBAAiB,EACjB1C,UAAWP,EAAQiC,cACfe,GAHR,aAKI,eAACxC,EAAA,EAAD,CACIjC,WAAS,EACTkC,UAAU,MACVC,eAAe,gBACfwC,aAAa,SAJjB,UAMI,cAACpB,EAAA,EAAD,CAAYd,QAAQ,KAAKT,UAAWP,EAAQkC,UAA5C,SACKY,IAEJC,EACG,cAACI,EAAA,EAAD,CAAYC,aAAW,QAAQnD,QAAS8C,EAAxC,SACI,cAAC,KAAD,MAEJ,cAOdQ,GAAgBV,aAAW,SAACvE,GAAD,MAAY,CACzC8C,KAAM,CACFiB,OAAQ,EACR7D,QAASF,EAAMG,QAAQ,GACvBE,gBAAiBC,IAAY,SAJfiE,CAMlBQ,MAQW,SAASG,GAAYzD,GAOhC,IAAMC,EAAU5B,KACR2E,EAAsEhD,EAAtEgD,QAASU,EAA6D1D,EAA7D0D,KAAMC,EAAuD3D,EAAvD2D,OAAQ5H,EAA+CiE,EAA/CjE,OAAQ6H,EAAuC5D,EAAvC4D,QAASC,EAA8B7D,EAA9B6D,eAEhD,GAFA,YAA8E7D,EAA9E,iEAE8B8D,IAAMC,SAAS,KAA7C,mBAAOjI,EAAP,KAAgBkI,EAAhB,KACA,EAA0BF,IAAMC,SAAS,IAAzC,mBAAOE,EAAP,KAAcC,EAAd,KAaMC,EAAO,SAAC/D,GACV8D,EAAS,IACTF,EAAW,IACXhB,EAAQ5C,IAGZ,OACI,eAACgE,GAAA,EAAD,CACIV,KAAMA,EACNV,QAAS,kBAAMmB,OAAKhD,IACpBkD,WAAS,EACTC,SAAS,KACTrE,QAAS,CAAEsE,MAAOtE,EAAQgC,iBAL9B,UAOI,cAAC,GAAD,CAAae,QAAS,kBAAMmB,OAAKhD,IAAjC,SAA8CyC,IAE9C,oBAAIpD,UAAWP,EAAQoC,KAEvB,qBAAK7B,UAAWP,EAAQ0C,cAAxB,SACI,eAAClC,EAAA,EAAD,CAAMjC,WAAS,EAACkC,UAAU,SAAShC,QAAS,EAAGyE,aAAa,SAA5D,WACwB,IAAnBU,GACD,cAACW,GAAA,EAAD,CACIpE,MAAOtE,EACPuE,SAAU,SAACoE,GAAD,OAAOT,EAAWS,EAAEC,OAAOtE,QACrCa,QAAQ,WACRV,YAAY,gBACZ0D,MAAiB,KAAVA,EACPU,WAAYV,EACZI,WAAS,EACT7D,UAAWP,EAAQnE,WAGH,IAAnB+H,GACD,oBAAIrD,UAAWP,EAAQoC,KAEvB,cAAC5B,EAAA,EAAD,CAAMI,MAAI,EAACL,UAAWP,EAAQwC,SAA9B,SACI,cAAChC,EAAA,EAAD,CAAMjC,WAAS,EAACkC,UAAU,SAA1B,SAEKiD,EAAOiB,KAAI,SAAChH,EAAOiH,GAAR,OACR,cAACpE,EAAA,EAAD,CAAMI,MAAI,EAAaC,GAAI,GAA3B,SACI,cAACa,GAAD,CACIF,SAAUoD,EAAM,EAChBjD,SAAUhE,EAAME,KAChBoC,QAAS,kBAAMiE,EAAK,CAACvG,EAAME,KAAM+G,EAAOjH,EAAMkH,YAJtCD,eAapC,oBAAIrE,UAAWP,EAAQoC,KAEvB,cAAC,GAAD,UACI,cAAC0C,GAAA,EAAD,CAAQC,WAAS,EAAC9E,QAhEf,WACPhE,EAAeJ,EAASC,GACxBoI,EAAKrI,GAELoI,EAAS,8BA4D8Be,MAAM,UAAzC,wB,mCCzKV5G,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC2G,QAAS,CACP5C,OAAQ,EACR6C,SAAU,YAEZC,SAAU,CACRH,MAAOI,KAAM,KACbF,SAAU,WACVG,IAAK,MACLC,KAAM,MACN3C,WAAY,GACZzD,YAAa,QAIF,SAASqG,GAAcxF,GACpC,IAAMC,EAAU5B,KACR0E,EAA+D/C,EAA/D+C,SAAU0C,EAAqDzF,EAArDyF,QAASC,EAA4C1F,EAA5C0F,MAAsBxF,GAAsBF,EAArC2F,QAAqC3F,EAA5B4F,KAA4B5F,EAAtBE,SAAY+C,EAA7D,YAAuEjD,EAAvE,2DACA,OACE,sBAAKQ,UAAWP,EAAQiF,QAAxB,UACE,cAACH,GAAA,EAAD,yBACE9D,QAAQ,YACRgE,MAAM,UACNZ,WAAS,EACTjD,SAAUqE,IAAYC,EACtBG,KAAK,SACL3F,QAASA,GACL+C,GAPN,aASGF,KAEF0C,GAAW,cAACK,GAAA,EAAD,CAAkB9E,KAAM,GAAIR,UAAWP,EAAQmF,c,wICnB/C9G,aAAW,SAACC,GAAD,MAAY,CACrC2G,QAAS,CACL5C,OAAQ,EACR6C,SAAU,YAEdC,SAAU,CACNH,MAAOI,KAAM,KACbF,SAAU,WACVG,IAAK,MACLC,KAAM,MACN3C,WAAY,GACZzD,YAAa,QAGN,SAAS4G,GAAY/F,GAChC,IAAOE,EAA8BF,EAA9BE,QAAS8F,EAAqBhG,EAArBgG,QAChB,GADA,YAAqChG,EAArC,uBACwB8D,YAAe,IAAvC,mBAAOJ,EAAP,KAAauC,EAAb,KACMC,EAAYpC,SAAa,MAC/B,EAA0CA,WAAe,GAAzD,mBAAOqC,EAAP,KAAsBC,EAAtB,KAiBMC,EAAc,SAACzI,GACbsI,EAAUI,SAAWJ,EAAUI,QAAQC,SAAS3I,EAAM8G,SAI1DuB,GAAQ,IAGZ,OACI,eAAC,WAAD,WACI,eAACO,GAAA,EAAD,CAAavF,QAAQ,YAAYwF,IAAKP,EAAtC,UACI,eAAC,KAAD,CACIjB,MAAM,UACNjE,KAAK,SACLd,QA7BI,kBAChBA,EAAQiG,MAyBA,UAKI,cAAC,KAAD,IACCH,EAAQG,MAIb,cAAC,KAAD,CACInF,KAAK,QACLiE,MAAM,UACNyB,gBAAehD,EAAO,yBAAsBvC,EAC5CwF,gBAAejD,EAAO,YAASvC,EAC/BkC,aAAW,gBACXuD,gBAAc,OACd1G,QAhCK,WACjB+F,GAAQ,SAACY,GAAD,OAAeA,MAwBf,SASI,cAAC,KAAD,SAGR,cAACC,GAAA,EAAD,CACIC,GAAI,CACAtH,OAAQ,GAEZiE,KAAMA,EACNsD,SAAUd,EAAUI,QACpBW,UAAM9F,EACN+F,YAAU,EACVC,eAAa,EARjB,SAUK,gBAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,UAApB,OACG,cAACC,GAAA,EAAD,2BACQF,GADR,IAEIG,MAAO,CACHC,gBACkB,WAAdH,EAAyB,aAAe,iBAJpD,SAQI,cAAC,KAAD,CACIpG,QAAS,YACT8F,GAAI,CAAElH,MAAO,KAFjB,SAII,cAAC4H,GAAA,EAAD,CAAmBC,YAAarB,EAAhC,SACI,cAACsB,GAAA,EAAD,CAAUC,GAAG,oBAAoBC,eAAa,EAACC,OAAK,EAApD,SACK9B,EAAQpB,KAAI,SAACmD,EAAQlD,GAAT,OACT,cAACmD,GAAA,EAAD,CAKIC,SAAUpD,IAAUsB,EACpBjG,QAAS,SAACtC,GAAD,OA1ErB,SAACA,EAAOiH,GAChCuB,EAAiBvB,GACjBoB,GAAQ,GAwEgDiC,CAAoBtK,EAAOiH,IANnD,SAQI,eAACsD,GAAA,EAAD,CAAcpB,GAAI,CAAEqB,GAAG,GAAvB,cAA8BL,EAA9B,QAPKA,qBC1GjD,IAAM1J,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,UAAW,CACPC,QAASF,EAAMG,QAAQ,GACvBC,UAAW,OACXC,gBAAiBC,IAAY,IAC7BC,aAAcP,EAAMG,QAAQ,GAC5BK,YAAaF,IAAY,KACzBG,YAAa,MACbC,YAAa,SAEjBC,gBAAiB,CACbT,QAASF,EAAMG,QAAQ,GACvBC,UAAW,OACXC,gBAAiBC,IAAY,IAC7BC,aAAcP,EAAMG,QAAQ,GAC5BK,YAAaF,IAAY,KACzBG,YAAa,MACbC,YAAa,QACbE,WAAY,MACZC,UAAW,SAEfC,gBAAiB,CACbZ,QAASF,EAAMG,QAAQ,GACvBC,UAAW,OACXG,aAAcP,EAAMG,QAAQ,IAEhCY,KAAM,CACFC,OAAQ,QAEZC,IAAK,CACDC,OAAQ,KAEZC,MAAM,2BACCnB,EAAMoB,WAAWC,IADnB,IAEDC,MAAO,SAEXC,UAAW,CACPV,UAAW,aAaJ,SAASiJ,GAAWrI,GAQ/B,IAAMC,EAAU5B,KACS+B,GAA8CJ,EAA/DE,QAA+DF,EAAtDG,OAAsDH,EAA9CI,OAAOC,EAAuCL,EAAvCK,SAAUC,EAA6BN,EAA7BM,YAAaC,EAAgBP,EAAhBO,YAEvD,OACI,qBAAKC,UAAWP,EAAQzB,UAAxB,SACI,cAACiC,EAAA,EAAD,CACIjC,WAAS,EACTkC,UAAU,MACVC,eAAe,gBACfC,WAAW,SACXJ,UAAWP,EAAQX,KALvB,SAQI,cAACmB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACI,cAACI,EAAA,EAAD,CACId,MAAOA,EACPC,SAAUA,EACVE,iBAA2BY,IAAdZ,EAAwBA,EAAYnD,WAAW,MAC5DgE,UAAWd,EACXL,QAAS,CAAEoB,KAAMpB,EAAQP,MAAOA,MAAOO,EAAQH,mBCnFhE,IAAMwI,GAGH,OAmBGC,GAAW,CACpB,CACIzK,KAAM,oBAEV,CACIA,KAAM,gBAEV,CACIA,KAAM,oBAEV,CACIA,KAAM,qBAID0K,GAAY,CACrB,CACI5K,MAAO,6CACP6K,QAAS,8CAEb,CACC7K,MAAO,6CACJ6K,QAAS,8CAEb,CACC7K,MAAS,6CACT6K,QAAS,+CAIDC,GAAS,CAClB,CACI5K,KAAM,mBAEV,CACIA,KAAM,oBAID6K,GAAY,CACrB,CACC7K,KAAM4K,GAAO,GAAG5K,KAChBgH,MAAQ,CACJ,CACIhH,KAAMwK,GACNxD,MAAO,CAAC,CAAChH,KAAMyK,GAAS,GAAGzK,KACvBgH,MAAO,CAAC0D,GAAU,GAAG5K,MAAO4K,GAAU,GAAGC,YAGjD,CACI3K,KAtDH,kBAuDGgH,MAAO,CAAC,CAAChH,KAAMyK,GAAS,GAAGzK,KACvBgH,MAAO,CAAC0D,GAAU,GAAG5K,MAAO4K,GAAU,GAAGC,cAMtD,CACC3K,KAAM4K,GAAO,GAAG5K,KAChBgH,MAAO,CACH,CAAGhH,KAAMwK,GACNxD,MAAO,CACH,CACHhH,KAAMyK,GAAS,GAAGzK,KACfgH,MAAO,CAAC0D,GAAU,GAAG5K,MAAO4K,GAAU,GAAGC,e,6GC3EnDG,GAAiBC,aAAOC,KAAPD,EAAsB,kBAAGtK,EAAH,EAAGA,MAAH,uCACnCwK,KAAqBC,kBAAqB,CAC5C1D,IAAK,GACLC,KAAM,oBACN0D,MAAO,qBAJ8B,2BAMnCF,KAAqBG,QANc,6BAO9BH,KAAqBI,MAAS,CACjCpK,YAAa,aARoB,2BAWnCgK,KAAqBK,WAXc,6BAY9BL,KAAqBI,MAAS,CACjCpK,YAAa,aAboB,4BAgBlCgK,KAAqBI,MAAS,CACjCpK,YAAoC,SAAvBR,EAAM8K,QAAQC,KAAkB/K,EAAM8K,QAAQE,KAAK,KAAO,UACvEC,eAAgB,EAChB1K,aAAc,IAnBuB,KAuBvC2K,GAAoBZ,aAAO,MAAPA,EAAc,gBAAGtK,EAAH,EAAGA,MAAOmL,EAAV,EAAUA,WAAV,mBAAC,aACrCzE,MAA8B,SAAvB1G,EAAM8K,QAAQC,KAAkB/K,EAAM8K,QAAQE,KAAK,KAAO,UACjEI,QAAS,OACTpK,OAAQ,GACRqB,WAAY,UACR8I,EAAWR,QAAU,CACrBjE,MAAO,YANyB,IAQpC,iCAAkC,CAC9BA,MAAO,UACPxF,OAAQ,EACRmK,SAAU,IAEd,0BAA2B,CACvB/J,MAAO,EACPN,OAAQ,EACRT,aAAc,MACdF,gBAAiB,qBAIzB,SAASiL,GAAc7J,GACnB,IAAQkJ,EAAiClJ,EAAjCkJ,OAAQE,EAAyBpJ,EAAzBoJ,UAAW5I,EAAcR,EAAdQ,UAE3B,OACI,cAACiJ,GAAD,CAAmBC,WAAY,CAAER,UAAU1I,UAAWA,EAAtD,SACK4I,EACG,cAAC,KAAD,CAAO5I,UAAU,gCAEjB,qBAAKA,UAAU,2BAoB/B,IAAMsJ,GAAQ,CAAC,mBAAoB,+CAAgD,4BAA6B,0BAEjG,SAASC,GAAwB/J,GAC5C,IAAOgK,EAAwBhK,EAAxBgK,WAEP,GAFA,YAA+BhK,EAA/B,gBAE8B8D,WAAe,IAAImG,MAAjD,6BA6CA,OACI,eAACC,GAAA,EAAD,CAAKnD,GAAI,CAAElH,MAAO,MAAMuI,GAAI,GAAI+B,GAAI,GAApC,UACI,cAACC,GAAA,EAAD,CAASpB,kBAAgB,EAACgB,WAAYA,EAAYK,UAAW,cAACzB,GAAD,IAA7D,SACKkB,GAAMlF,KAAI,SAAC0F,EAAOzF,GAWf,OACI,cAAC0F,GAAA,EAAD,2BAXc,IAWd,aACI,cAACC,GAAA,EAAD,yBAAYC,kBAAmBZ,IAXpB,IAWX,aAA+DS,OADxDA,QAMtBN,IAAeF,GAAMY,OAClB,eAAC,WAAD,WACI,cAAC,KAAD,CAAY3D,GAAI,CAAE4D,GAAI,EAAGR,GAAI,GAA7B,4DAGA,cAACD,GAAA,EAAD,CAAKnD,GAAI,CAAE4C,QAAS,OAAQiB,cAAe,MAAOC,GAAI,GAAtD,SACI,cAACX,GAAA,EAAD,CAAKnD,GAAI,CAAE+D,KAAM,mBAKzB,eAAC,WAAD,WACI,eAAC,KAAD,CAAY/D,GAAI,CAAE4D,GAAI,EAAGR,GAAI,GAA7B,kBAAwCH,EAAa,KACrD,cAACE,GAAA,EAAD,CAAKnD,GAAI,CAAE4C,QAAS,OAAQiB,cAAe,MAAOC,GAAI,GAAtD,SASI,cAACX,GAAA,EAAD,CAAKnD,GAAI,CAAE+D,KAAM,sBC3IzC,IAiCMzM,GAAYC,aAjCH,SAACC,GAAD,MAAY,CACzBwM,eAAgB,CACdjM,aAAcP,EAAMG,QAAQ,GAC5BD,QAASF,EAAMG,QAAQ,GACvB8C,cAAejD,EAAMG,QAAQ,GAC7BE,gBAAiB,WAEnBoM,aAAc,CACZvL,OAAQ,EACR6C,OAAQ,QACR7D,QAASF,EAAMG,QAAQ,KAEzB2F,UAAW,CACTxE,MAAO,QAEThF,MAAO,CACLuE,UAAW,SACXX,QAASF,EAAMG,QAAQ,IACvBuM,aAAc1M,EAAMG,QAAQ,IAE9B2D,GAAI,CACFxC,MAAO,QAETqL,QAAS,CACPzM,QAASF,EAAMG,QAAQ,GACvBmE,SAAU,OACVzD,UAAW,UAEb+L,OAAQ,CACNvI,UAAW,aAgfAwI,OA1ef,SAAqBpL,GACnB,IAAMC,EAAU5B,KACRgN,EAAoBC,cAApBD,gBAIR,EAAgCvH,IAAMC,SAAS1I,KAA/C,mBAAOO,EAAP,KACA,GADA,KAC4BkI,IAAMC,SAASpI,EAAUC,KAArD,mBAAOG,EAAP,KACA,GADA,KAC8B+H,IAAMC,cAAS5C,IAA7C,mBAEA,GAFA,UAEsC2C,IAAMC,SAC1C,+CADF,mBAAO1H,EAAP,KAGA,GAHA,KAGwCyH,IAAMC,SAC5C,OADF,mBAAOzH,EAAP,KAAqBiP,EAArB,KAGA,EAA8CzH,IAAMC,SAChD,MADJ,mBAAOyH,EAAP,KAAwBC,EAAxB,KAGA,EAAwB3H,IAAMC,SAC5BlI,EAAQ,6CAA8CE,IADxD,mBAMA,GANA,UAMsC+H,IAAMC,UAAS,IAArD,mBAAO2H,EAAP,KAAoBC,EAApB,KACA,EAAsC7H,IAAMC,UAAS,GAArD,mBAAO6H,EAAP,KAAoBC,EAApB,KACA,EAAsC/H,IAAMC,UAAS,GAArD,mBAAO+H,EAAP,KAAoBC,EAApB,KACA,EAAoCjI,IAAMC,SAAS,GAAnD,mBAAOiG,GAAP,KAAmBgC,GAAnB,KAKA,GAA4BlI,IAAMC,SAAS,CACzCkI,YAAY,EACZpH,WAAO1D,EACPrD,UAAMqD,IAHR,qBAAO+K,GAAP,MAAeC,GAAf,MAMA,GAA4BrI,IAAMC,SAAS,CACzCkI,YAAY,EACZpH,WAAO1D,EACPrD,UAAMqD,IAHR,qBAAOiL,GAAP,MAAeC,GAAf,MAMA,GAA4BvI,IAAMC,SAAS,CACzCkI,YAAY,EACZpH,WAAO1D,EACPrD,UAAMqD,IAHR,qBAAOmL,GAAP,MAAeC,GAAf,MAMA,GAAgCzI,IAAMC,SAAS,CAAC,MAAO,QAAvD,qBAGA,IAHA,YAGsCD,IAAMC,SAAS,KAArD,qBAAOyI,GAAP,MAAoBC,GAApB,MACA,GAAsC3I,IAAMC,SAAS,IAArD,qBAAO2I,GAAP,MAAoBC,GAApB,MACA,GAAsC7I,IAAMC,SAAS,IAArD,qBAAO6I,GAAP,MAAoBC,GAApB,MACA,GAAsC/I,IAAMC,SAAS,IAArD,qBAAO+I,GAAP,MAAoBC,GAApB,MAGA,GAA8BjJ,IAAMC,UAAS,GAA7C,qBAAO0B,GAAP,MAAgBuH,GAAhB,MAGMC,GAAe,CACnBC,OAAQ,SAACzI,GACPsI,GAAetI,EAAEC,OAAOtE,OACxB4L,GAAc,KAgRlB,OACE,gCACE,cAACjC,GAAD,CACAC,WAAcA,KAGd,cAACvG,GAAD,CACEC,KAAMgI,EACN1I,QA1PmB,SAACmK,GAExBxB,GAAe,QAKHxK,IAARgM,IACFhB,GACI,CACEF,YAAY,EACZnO,KAAMqP,EAAI,GACVtI,MAAOsI,EAAI,KAGjBV,GACI,WAAWU,EAAI,IAEnBnB,GAAc,KAyOZrI,OAAQyJ,GACRrR,OAAQA,EACR6H,QAAW,mBACXC,gBAAkB,IAEpB,cAACJ,GAAD,CACEC,KAAMkI,EACN5I,QA5OmB,SAACmK,GAExBtB,GAAe,QAKH1K,IAARgM,IACFd,GACI,CACEJ,YAAY,EACZnO,KAAMqP,EAAI,GACVtI,MAAOsI,EAAI,KAGjBR,GACG,UAAWQ,EAAI,IAElBnB,GAAc,KA2NZrI,OAAQuI,GAAOD,WAAamB,GAAiBlB,GAAOrH,OAAOC,MAAQ,GACnE/I,OAAQA,EACR6H,QAAW,eACXC,gBAAkB,IAEpB,cAACJ,GAAD,CACIC,KAAMoI,EACN9I,QA7NiB,SAACmK,GAExBpB,GAAe,QAKH5K,IAARgM,IACFZ,GACI,CACEN,YAAY,EACZnO,KAAMqP,EAAI,GACVtI,MAAOsI,EAAI,KAGjBN,GACI,aAAaM,EAAI,IAErB5B,EAAgB4B,EAAI,GAAGvP,OACvB6N,EAAmB0B,EAAI,GAAG1E,SAC1BuD,GAAc,KA0MVrI,OAAQyI,GAAOH,WAAamB,GAAiBlB,GAAOrH,OAAOC,MAAMsH,GAAOvH,OAAOC,MAAQ,GACvF/I,OAAQA,EACR6H,QAAW,kBACXC,gBAAkB,IAItB,cAACwJ,EAAA,EAAD,CAAW/I,SAAS,KAApB,SACE,eAACgJ,EAAA,EAAD,CAAO9M,UAAWP,EAAQ8K,eAA1B,UACE,cAAChJ,EAAA,EAAD,CAAYd,QAAQ,KAAKT,UAAWP,EAAQpF,MAA5C,iCAIA,eAAC4F,EAAA,EAAD,CAAMjC,WAAS,EAACkC,UAAU,SAASE,WAAW,SAASlC,QAAS,EAAhE,UACE,cAAC+B,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIN,UAAWP,EAAQoE,UAAtC,SACE,cAACtE,EAAD,CACEO,aAAa,EACbF,MAAOoM,GACPtM,QAAS,kBAAMyL,GAAe,IAC9BpL,YAAa,mBAEbJ,QAA8B,IAAtB+L,GAAOD,WAAuB,OAAS,aAInD,cAACxL,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIN,UAAWP,EAAQoE,UAAtC,SACE,cAACtE,EAAD,CACEO,aAAa,EACbF,MAAOsM,GACPxM,QAAS,kBAAM2L,GAAe,IAC9BtL,YAAa,eAEbJ,QAA8B,IAAtBiM,GAAOH,WAAuB,OAAS,aAInD,cAACxL,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIN,UAAWP,EAAQoE,UAAtC,SACE,cAACtE,EAAD,CACIO,aAAa,EACbF,MAAOwM,GACP1M,QAAS,kBAAM6L,GAAe,IAC9BxL,YAAa,kBAEbJ,QAA8B,IAAtBmM,GAAOL,WAAuB,OAAS,aAGrD,cAACxL,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIN,UAAWP,EAAQoE,UAAtC,SACE,cAACgE,GAAD,CACI/H,aAAa,EACbF,MAAO0M,GACPzM,SAAU4M,GAAaC,OACvBhN,QAAS,kBAAM6L,GAAe,IAC9BxL,YAAa,sBAInB,oBAAIC,UAAWP,EAAQoC,KAGvB,cAACN,EAAA,EAAD,CAAYd,QAAQ,KAApB,+BAEI,cAACc,EAAA,EAAD,CAAYd,QAAQ,QAAQT,UAAWP,EAAQiL,QAA/C,kBAMJ,oBAAI1K,UAAWP,EAAQoC,KAoBvB,cAAC0D,GAAD,CACA7F,QAAS,CA7RD,WAChB1D,QAAQC,IAAI,0BACZD,QAAQC,IAAIb,GACZY,QAAQC,IAAIV,EAAOwR,cACnBP,IAAW,GVuER,SAAP,sCUrEIQ,CACIC,WAAWX,IACXtB,EACAzP,GAEC2R,MAAK,WACJV,IAAW,GAGXP,GAAe,IACfpB,EAAgB,yBAA0B,CAAEpK,QAAS,eAEtD0M,OAAM,SAAClJ,GACNuI,IAAW,GACX3B,EAAgB,uBAAyB5G,EAAEmJ,QAAU,IAAK,CACxD3M,QAAS,QACT4M,iBAAkB,UAIT,WACjBrR,QAAQC,IAAI,0BACZD,QAAQC,IAAIb,GACZY,QAAQC,IAAIV,EAAOwR,cACnBP,IAAW,GVyER,SAAP,sCUvEIc,CACIL,WAAWjB,IACXhB,EACAzP,GAEC2R,MAAK,WACJV,IAAW,GAGXP,GAAe,IACfpB,EAAgB,yBAA0B,CAAEpK,QAAS,eAEtD0M,OAAM,SAAClJ,GACNuI,IAAW,GACX3B,EAAgB,uBAAyB5G,EAAEmJ,QAAU,IAAK,CACxD3M,QAAS,QACT4M,iBAAkB,WA8OlB7H,QAAW,CAAC,MAAO,UAInB,oBAAIxF,UAAWP,EAAQoC,KAErB,cAAC5B,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACE,eAAC0E,GAAD,CACIC,QAASA,GACTC,OAAO,EACPC,SAAS,EACTC,MAAM,EACN1F,QApPI,WACpB1D,QAAQC,IAAI,4BACZuQ,IAAW,GV0ER,SAAP,sCUxEIe,CACI1R,EACAC,EACAP,GAEC2R,MAAK,WACJV,IAAW,GACX3B,EAAgB,yBAA0B,CAAEpK,QAAS,eAEtD0M,OAAM,SAAClJ,GACNuI,IAAW,GACX3B,EAAgB,uBAAyB5G,EAAEmJ,QAAU,IAAK,CACxD3M,QAAS,QACT4M,iBAAkB,UA8Nd,UAOE,cAAC,IAAD,IAPF,uBAgBV,cAACpN,EAAA,EAAD,CACEjC,WAAS,EACTgC,UAAWP,EAAQkL,OACnBzK,UAAU,MACVC,eAAe,SACfC,WAAW,WALb,SAOE,0D,yCCtiBM1F,EAAQ,KACTA,EAAQ,KCmDHoD,aAnCH,SAACC,GAAD,MAAY,CACzBwM,eAAgB,CACdjM,aAAcP,EAAMG,QAAQ,GAC5BD,QAASF,EAAMG,QAAQ,GACvB8C,cAAejD,EAAMG,QAAQ,GAC7BmB,MAAO,MACPgD,SAAU,OACVmL,WAAY,mDACZ/I,MAAO,SAETZ,UAAW,CACTxE,MAAO,QAEToO,OAAQ,CACNpO,MAAO,OAEThF,MAAO,CACLuE,UAAW,SACXX,QAASF,EAAMG,QAAQ,IACvBuM,aAAc1M,EAAMG,QAAQ,IAE9B2D,GAAI,CACFxC,MAAO,QAETqL,QAAS,CACPzM,QAASF,EAAMG,QAAQ,GACvBmE,SAAU,OACVzD,UAAW,UAEb8O,WAAY,CACVC,YAAa5P,EAAMG,QAAQ,GAC3BD,QAASF,EAAMG,QAAQ,S,OCKTJ,aAnCH,SAACC,GAAD,MAAY,CACzBwM,eAAgB,CACdjM,aAAcP,EAAMG,QAAQ,GAC5BD,QAASF,EAAMG,QAAQ,GACvB8C,cAAejD,EAAMG,QAAQ,GAC7BmB,MAAO,MACPgD,SAAU,OACVmL,WAAY,mDACZ/I,MAAO,SAETZ,UAAW,CACTxE,MAAO,QAEToO,OAAQ,CACNpO,MAAO,OAEThF,MAAO,CACLuE,UAAW,SACXX,QAASF,EAAMG,QAAQ,IACvBuM,aAAc1M,EAAMG,QAAQ,IAE9B2D,GAAI,CACFxC,MAAO,QAETqL,QAAS,CACPzM,QAASF,EAAMG,QAAQ,GACvBmE,SAAU,OACVzD,UAAW,UAEb8O,WAAY,CACVC,YAAa5P,EAAMG,QAAQ,GAC3BD,QAASF,EAAMG,QAAQ,SAkaZ0P,IC5cTxF,GAAiBC,aAAOC,KAAPD,EAAsB,kBAAGtK,EAAH,EAAGA,MAAH,uCACnCwK,KAAqBC,kBAAqB,CAC5C1D,IAAK,GACLC,KAAM,oBACN0D,MAAO,qBAJ8B,2BAMnCF,KAAqBG,QANc,6BAO9BH,KAAqBI,MAAS,CACjCpK,YAAa,aARoB,2BAWnCgK,KAAqBK,WAXc,6BAY9BL,KAAqBI,MAAS,CACjCpK,YAAa,aAboB,4BAgBlCgK,KAAqBI,MAAS,CACjCpK,YAAoC,SAAvBR,EAAM8K,QAAQC,KAAkB/K,EAAM8K,QAAQE,KAAK,KAAO,UACvEC,eAAgB,EAChB1K,aAAc,IAnBuB,KAuBvC2K,GAAoBZ,aAAO,MAAPA,EAAc,gBAAGtK,EAAH,EAAGA,MAAOmL,EAAV,EAAUA,WAAV,mBAAC,aACrCzE,MAA8B,SAAvB1G,EAAM8K,QAAQC,KAAkB/K,EAAM8K,QAAQE,KAAK,KAAO,UACjEI,QAAS,OACTpK,OAAQ,GACRqB,WAAY,UACR8I,EAAWR,QAAU,CACrBjE,MAAO,YANyB,IAQpC,iCAAkC,CAC9BA,MAAO,UACPxF,OAAQ,EACRmK,SAAU,IAEd,0BAA2B,CACvB/J,MAAO,EACPN,OAAQ,EACRT,aAAc,MACdF,gBAAiB,qBAIzB,SAASiL,GAAc7J,GACnB,IAAQkJ,EAAiClJ,EAAjCkJ,OAAQE,EAAyBpJ,EAAzBoJ,UAAW5I,EAAcR,EAAdQ,UAE3B,OACI,cAAC,GAAD,CAAmBkJ,WAAY,CAAER,UAAU1I,UAAWA,EAAtD,SACK4I,EACG,cAAC,KAAD,CAAO5I,UAAU,gCAEjB,qBAAKA,UAAU,2BAoB/B,IAAMsJ,GAAQ,CAAC,mBAAoB,+CAAgD,4BAA6B,4BAEjG,SAASC,GAAwB/J,GAC5C,IAAOgK,EAAwBhK,EAAxBgK,WAAP,YAA+BhK,EAA/B,gBAEA,OACI,eAACkK,GAAA,EAAD,CAAKnD,GAAI,CAAElH,MAAO,MAAMuI,GAAI,GAAI+B,GAAI,GAApC,UACI,cAACC,GAAA,EAAD,CAASpB,kBAAgB,EAACgB,WAAYA,EAAYK,UAAW,cAAC,GAAD,IAA7D,SACKP,GAAMlF,KAAI,SAAC0F,EAAOzF,GAGf,OACI,cAAC0F,GAAA,EAAD,2BAHc,IAGd,aACI,cAACC,GAAA,EAAD,yBAAYC,kBAAmBZ,IAHpB,IAGX,aAA+DS,OADxDA,QAMtBN,IAAeF,GAAMY,OAClB,eAAC,WAAD,WACI,cAAC,KAAD,CAAY3D,GAAI,CAAE4D,GAAI,EAAGR,GAAI,GAA7B,4DAGA,cAACD,GAAA,EAAD,CAAKnD,GAAI,CAAE4C,QAAS,OAAQiB,cAAe,MAAOC,GAAI,GAAtD,SACI,cAACX,GAAA,EAAD,CAAKnD,GAAI,CAAE+D,KAAM,mBAIzB,eAAC,WAAD,WACI,eAAC,KAAD,CAAY/D,GAAI,CAAE4D,GAAI,EAAGR,GAAI,GAA7B,kBAAwCH,EAAa,KACrD,cAACE,GAAA,EAAD,CAAKnD,GAAI,CAAE4C,QAAS,OAAQiB,cAAe,MAAOC,GAAI,GAAtD,SACI,cAACX,GAAA,EAAD,CAAKnD,GAAI,CAAE+D,KAAM,sBC7EzC,IAiCMzM,GAAYC,aAjCH,SAACC,GAAD,MAAY,CACvBwM,eAAgB,CACZjM,aAAcP,EAAMG,QAAQ,GAC5BD,QAASF,EAAMG,QAAQ,GACvB8C,cAAejD,EAAMG,QAAQ,GAC7BE,gBAAiB,WAErBoM,aAAc,CACVvL,OAAQ,EACR6C,OAAQ,QACR7D,QAASF,EAAMG,QAAQ,KAE3B2F,UAAW,CACPxE,MAAO,QAEXhF,MAAO,CACHuE,UAAW,SACXX,QAASF,EAAMG,QAAQ,IACvBuM,aAAc1M,EAAMG,QAAQ,IAEhC2D,GAAI,CACAxC,MAAO,QAEXqL,QAAS,CACLzM,QAASF,EAAMG,QAAQ,GACvBmE,SAAU,OACVzD,UAAW,UAEf+L,OAAQ,CACJvI,UAAW,aA+cJyL,OAzcf,SAAwBrO,GACpB,IAAMC,EAAU5B,KACRgN,EAAoBC,cAApBD,gBAIR,EAAgCvH,IAAMC,SAAS1I,KAA/C,mBAAOO,EAAP,KACA,GADA,KAC4BkI,IAAMC,SAASpI,EAAUC,KAArD,mBAAOG,EAAP,KACA,GADA,KAC8B+H,IAAMC,cAAS5C,IAA7C,mBAEA,GAFA,UAEsC2C,IAAMC,SACxC,+CADJ,mBAAO1H,EAAP,KAGA,GAHA,KAGwCyH,IAAMC,SAC1C,+CADJ,mBAAOzH,EAAP,KAAqBiP,EAArB,KAKA,EAAsCzH,IAAMC,UAAS,GAArD,mBAAO2H,EAAP,KAAoBC,EAApB,KACA,EAAsC7H,IAAMC,UAAS,GAArD,mBAAO6H,EAAP,KAAoBC,EAApB,KACA,EAAsC/H,IAAMC,UAAS,GAArD,mBAAO+H,EAAP,KAAoBC,EAApB,KAEA,EAAoCjI,IAAMC,SAAS,GAAnD,mBAAOiG,EAAP,KAAmBgC,EAAnB,KAGA,EAAsClI,IAAMC,SAAS,IAArD,mBAAOyI,EAAP,KAAoBC,EAApB,KACA,EAAsC3I,IAAMC,SAAS,IAArD,mBAAO2I,GAAP,KAAoBC,GAApB,KACA,GAAsC7I,IAAMC,SAAS,IAArD,qBAAO6I,GAAP,MAAoBC,GAApB,MACA,GAAsC/I,IAAMC,SAAS,IAArD,qBAAO+I,GAAP,MAAoBC,GAApB,MAIA,GAA8BjJ,IAAMC,UAAS,GAA7C,qBAAgBiJ,IAAhB,aAEA,GAA4BlJ,IAAMC,SAAS,CACvCkI,YAAY,EACZpH,WAAO1D,EACPrD,UAAMqD,IAHV,qBAAO+K,GAAP,MAAeC,GAAf,MAMA,GAA4BrI,IAAMC,SAAS,CACvCkI,YAAY,EACZpH,WAAO1D,EACPrD,UAAMqD,IAHV,qBAAOiL,GAAP,MAAeC,GAAf,MAMA,GAA4BvI,IAAMC,SAAS,CACvCkI,YAAY,EACZpH,WAAO1D,EACPrD,UAAMqD,IAHV,qBAAOmL,GAAP,MAAeC,GAAf,MAQMU,GAAe,CACjBqB,OAAQ,SAAC7J,GACLgI,EAAehI,EAAEC,OAAOtE,QAGxB8M,OAAQ,SAACzI,GACLsI,GAAetI,EAAEC,OAAOtE,OACxB4L,EAAc,KAiIpBuC,GAAa,WACf/R,QAAQC,IAAI,0BACZD,QAAQC,IAAIb,GACZY,QAAQC,IAAIV,EAAOwR,cACnBP,IAAW,GfPZ,SAAP,wCeSQwB,CACIf,WAAWX,IACXzQ,EACAC,EACAP,GAEC2R,MAAK,WACFV,IAAW,GAGXP,EAAe,IACfpB,EAAgB,yBAA0B,CAAEpK,QAAS,eAExD0M,OAAM,SAAClJ,GACJuI,IAAW,GACX3B,EAAgB,uBAAyB5G,EAAEmJ,QAAU,IAAK,CACtD3M,QAAS,QACT4M,iBAAkB,UA+HlC,OACI,gCACI,cAAC,GAAD,CACI7D,WAAcA,IAGlB,cAACvG,GAAD,CACIC,KAAMgI,EACN1I,QA9Pa,SAACmK,GAEtBxB,GAAe,QAKHxK,IAARgM,IACAhB,GACI,CACIF,YAAY,EACZnO,KAAMqP,EAAI,GACVtI,MAAOsI,EAAI,KAGnBV,EACI,WAAWU,EAAI,IAEnBnB,EAAc,KA6OVrI,OAAQyJ,GACRrR,OAAQA,EACR6H,QAAW,mBACXC,gBAAkB,IAEtB,cAACJ,GAAD,CACIC,KAAMkI,EACN5I,QAhPa,SAACmK,GAEtBtB,GAAe,QAKH1K,IAARgM,IACAd,GACI,CACIJ,YAAY,EACZnO,KAAMqP,EAAI,GACVtI,MAAOsI,EAAI,KAGnBR,GACI,UAAWQ,EAAI,IAEnBnB,EAAc,KA+NVrI,OAAQuI,GAAOD,WAAamB,GAAiBlB,GAAOrH,OAAOC,MAAQ,GACnE/I,OAAQA,EACR6H,QAAW,eACXC,gBAAkB,IAEtB,cAACJ,GAAD,CACIC,KAAMoI,EACN9I,QAjOa,SAACmK,GAEtBpB,GAAe,QAKH5K,IAARgM,IACAZ,GACI,CACIN,YAAY,EACZnO,KAAMqP,EAAI,GACVtI,MAAOsI,EAAI,KAGnBN,GACI,aAAaM,EAAI,IAErB5B,EAAgB4B,EAAI,GAAGvP,OACvBoO,EAAc,KA+MVrI,OAAQyI,GAAOH,WAAamB,GAAiBlB,GAAOrH,OAAOC,MAAMsH,GAAOvH,OAAOC,MAAQ,GACvF/I,OAAQA,EACR6H,QAAW,kBACXC,gBAAkB,IAItB,cAACwJ,EAAA,EAAD,CAAW/I,SAAS,KAApB,SACI,eAACgJ,EAAA,EAAD,CAAO9M,UAAWP,EAAQ8K,eAA1B,UACI,cAAChJ,EAAA,EAAD,CAAYd,QAAQ,KAAKT,UAAWP,EAAQpF,MAA5C,iCAIA,eAAC4F,EAAA,EAAD,CAAMjC,WAAS,EAACkC,UAAU,SAASE,WAAW,SAASlC,QAAS,EAAhE,UACI,cAAC+B,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIN,UAAWP,EAAQoE,UAAtC,SACI,cAACtE,EAAD,CACIO,aAAa,EACbF,MAAOoM,EACPtM,QAAS,kBAAMyL,GAAe,IAC9BpL,YAAa,mBACbJ,QAA8B,IAAtB+L,GAAOD,WAAuB,OAAS,aAKvD,cAACxL,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIN,UAAWP,EAAQoE,UAAtC,SACI,cAACtE,EAAD,CACIO,aAAa,EACbF,MAAOsM,GACPxM,QAAS,kBAAM2L,GAAe,IAC9BtL,YAAa,eACbJ,QAA8B,IAAtBiM,GAAOH,WAAuB,OAAS,aAIvD,cAACxL,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIN,UAAWP,EAAQoE,UAAtC,SACI,cAACtE,EAAD,CACIO,aAAa,EACbF,MAAOwM,GACP1M,QAAS,kBAAM6L,GAAe,IAC9BxL,YAAa,kBACbJ,QAA8B,IAAtBmM,GAAOL,WAAuB,OAAS,aAGvD,cAACxL,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIN,UAAWP,EAAQoE,UAAtC,SACI,cAACgE,GAAD,CACI/H,aAAa,EACbF,MAAO0M,GACP5M,QAAS,kBAAM6L,GAAe,IAC9B1L,SAAU4M,GAAaC,OACvB3M,YAAa,qBAIrB,oBAAIC,UAAWP,EAAQoC,KAGvB,cAACN,EAAA,EAAD,CAAYd,QAAQ,KAApB,0BAEA,cAACc,EAAA,EAAD,CAAYd,QAAQ,QAAQT,UAAWP,EAAQiL,QAA/C,mBAKA,oBAAI1K,UAAWP,EAAQoC,KAEvB,cAAC0D,GAAD,CACI7F,QAAS,CA7Qd,WACf1D,QAAQC,IAAI,0BACZD,QAAQC,IAAIb,GACZY,QAAQC,IAAIV,EAAOwR,cACnBP,IAAW,GfXZ,SAAP,wCeaQyB,CACIhB,WAAWX,IACXzQ,EACAC,EACAP,GAEC2R,MAAK,WACFV,IAAW,GAGXP,EAAe,IACfpB,EAAgB,yBAA0B,CAAEpK,QAAS,eAExD0M,OAAM,SAAClJ,GACJuI,IAAW,GACX3B,EAAgB,uBAAyB5G,EAAEmJ,QAAU,IAAK,CACtD3M,QAAS,QACT4M,iBAAkB,UAsPYU,GAvNzB,WACjB/R,QAAQC,IAAI,0BACZD,QAAQC,IAAIb,GACZY,QAAQC,IAAIV,EAAOwR,cACnBP,IAAW,GfHZ,SAAP,sCeKQ0B,CACIjB,WAAWX,IACXzQ,EACAC,EACAP,GAEC2R,MAAK,WACFV,IAAW,GAGXP,EAAe,IACfpB,EAAgB,yBAA0B,CAAEpK,QAAS,eAExD0M,OAAM,SAAClJ,GACJuI,IAAW,GACX3B,EAAgB,uBAAyB5G,EAAEmJ,QAAU,IAAK,CACtD3M,QAAS,QACT4M,iBAAkB,UAgMsCU,IAChDvI,QAAW,CAAC,OAAO,OAAO,SAAS,+BASnD,cAACvF,EAAA,EAAD,CACIjC,WAAS,EACTgC,UAAWP,EAAQkL,OACnBzK,UAAU,MACVC,eAAe,SACfC,WAAW,WALf,SAOI,yDC1eVvC,GAAYC,aAlBH,SAACC,GAAD,MAAY,CACzBwM,eAAgB,CACdjM,aAAcP,EAAMG,QAAQ,GAC5BD,QAASF,EAAMG,QAAQ,GACvB8C,cAAejD,EAAMG,QAAQ,GAC7B4F,SAAU,IACVhC,OAAQ,QAEVzH,MAAO,CACLuE,UAAW,SACXX,QAASF,EAAMG,QAAQ,IACvBuM,aAAc1M,EAAMG,QAAQ,IAE9ByM,OAAQ,CACNvI,UAAW,aA0BA+L,OApBf,WACkBtQ,KAAhB,IAEA,EAA4ByF,IAAMC,UAAS,GAA3C,mBAUA,OAVA,UAWE,8BACE,cAAC,GAAD,OCLA1F,GAAYC,aAlCH,SAACC,GAAD,MAAY,CACzBwM,eAAgB,CACdjM,aAAcP,EAAMG,QAAQ,GAC5BD,QAASF,EAAMG,QAAQ,GACvB8C,cAAejD,EAAMG,QAAQ,GAC7B4F,SAAU,IACVhC,OAAQ,OACRM,UAAW,SAEbyB,UAAW,CACTxE,MAAO,QAEThF,MAAO,CACLuE,UAAW,SACXX,QAASF,EAAMG,QAAQ,IACvBuM,aAAc1M,EAAMG,QAAQ,IAE9B2D,GAAI,CACFxC,MAAO,QAETqL,QAAS,CACPzM,QAASF,EAAMG,QAAQ,GACvBmE,SAAU,OACVzD,UAAW,UAEb8O,WAAY,CACVC,YAAa5P,EAAMG,QAAQ,GAC3BD,QAASF,EAAMG,QAAQ,KAEzByM,OAAQ,CACNvI,UAAW,aA6CAgM,OAvCf,WACE,IAAM3O,EAAU5B,KAChB,OACE,gCACE,qBAAKmC,UAAU,QAAf,SACE,oBAAIA,UAAU,cAAd,SACE,qBAAKqO,IAAKC,EAAMtO,UAAU,aAI9B,cAAC6M,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAO9M,UAAWP,EAAQ8K,eAA1B,SACE,cAAChJ,EAAA,EAAD,CACEd,QAAQ,KACRT,UAAWP,EAAQpF,MACnBoK,MAAM,eAHR,0FAWJ,cAACxE,EAAA,EAAD,CACEjC,WAAS,EACTgC,UAAWP,EAAQkL,OACnBzK,UAAU,MACVC,eAAe,SACfC,WAAW,WALb,SAOE,uGACyE,IACvE,mBAAGmO,KAAK,4CAAR,2B,oBCzEI7T,EAAQ,KACTA,EAAQ,KCiBrB,IAyCMmD,GAAYC,aAzCH,SAACC,GAAD,MAAY,CACzBwM,eAAgB,CACdjM,aAAcP,EAAMG,QAAQ,GAC5BD,QAASF,EAAMG,QAAQ,GACvB8C,cAAejD,EAAMG,QAAQ,GAC7BmB,MAAO,MACPgD,SAAU,OACVmL,WAAY,mDACZ/I,MAAO,SAET+J,gBAAiB,CACflQ,aAAcP,EAAMG,QAAQ,GAC5BD,QAASF,EAAMG,QAAQ,GACvB8C,cAAejD,EAAMG,QAAQ,GAC7BE,gBAAiB,WAEnByF,UAAW,CACTxE,MAAO,QAEToO,OAAQ,CACNpO,MAAO,OAEThF,MAAO,CACLuE,UAAW,SACXX,QAASF,EAAMG,QAAQ,IACvBuM,aAAc1M,EAAMG,QAAQ,IAE9B2D,GAAI,CACFxC,MAAO,QAETqL,QAAS,CACPzM,QAASF,EAAMG,QAAQ,GACvBmE,SAAU,OACVzD,UAAW,UAEb8O,WAAY,CACVC,YAAa5P,EAAMG,QAAQ,GAC3BD,QAASF,EAAMG,QAAQ,SAyMZuQ,OAnMf,SAAwBjP,GACtB,IAAMC,EAAU5B,KACRgN,EAAoBC,cAApBD,gBAGR,EAAgCvH,IAAMC,SAAS1I,KAA/C,mBAAOO,EAAP,KACA,GADA,KAC4BkI,IAAMC,SAASpI,EAAUC,KAArD,mBAAOG,EAAP,KACA,GADA,KAC8B+H,IAAMC,cAAS5C,IAA7C,mBAEA,GAFA,UAEwB2C,IAAMC,SAC5BlI,EAAQ,6CAA8CE,KADxD,mBAIA,GAJA,UAIsC+H,IAAMC,SACxC,+CADJ,mBAAO1H,EAAP,KAOA,GAPA,KAOgCyH,IAAMC,SAAS,CAAC,MAAO,SAAvD,mBAGA,GAHA,UAGsCD,IAAMC,SAAS,KAArD,mBAAOyI,EAAP,KAAoBC,EAApB,KACA,EAAsC3I,IAAMC,SAAS,IAArD,mBAAO2I,EAAP,KAAoBC,EAApB,KACA,EAAsC7I,IAAMC,SAAS,IAArD,mBAAO6I,EAAP,KAAoBC,EAApB,KACA,EAAsC/I,IAAMC,SAAS,IAArD,mBAAO+I,EAAP,KAAoBC,EAApB,KACA,EAAsCjJ,IAAMC,SAAS,IAArD,mBAAOmL,EAAP,KAAoBC,EAApB,KACA,EAAsCrL,IAAMC,SAAS,IAArD,mBAAOqL,EAAP,KAAoBC,EAApB,KAEA,EAA8BvL,IAAMC,UAAS,GAA7C,oBAAO0B,GAAP,MAAgBuH,GAAhB,MAGMC,GAAe,CACnBqB,OAAQ,SAAC7J,GACPgI,EAAehI,EAAEC,OAAOtE,QAE1BkP,OAAQ,SAAC7K,GACPkI,EAAelI,EAAEC,OAAOtE,QAE1BmP,OAAQ,SAAC9K,GACPoI,EAAepI,EAAEC,OAAOtE,QAE1B8M,OAAQ,SAACzI,GACPsI,EAAetI,EAAEC,OAAOtE,QAE1BoP,OAAQ,SAAC/K,GACP0K,EAAe1K,EAAEC,OAAOtE,QAE1BqP,OAAQ,SAAChL,GACP4K,EAAe5K,EAAEC,OAAOtE,SAiE5B,OACE,8BAGI,eAACkN,EAAA,EAAD,CAAO9M,UAAWP,EAAQ+O,gBAA1B,UACF,cAACjN,EAAA,EAAD,CAAYd,QAAQ,KAAKT,UAAWP,EAAQpF,MAA5C,wDAKA,eAAC4F,EAAA,EAAD,CAAMjC,WAAS,EAACkC,UAAU,SAASE,WAAW,SAASlC,QAAS,EAAGgR,GAAI,OAAvE,UACE,cAACjP,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGN,UAAWP,EAAQoE,UAArC,SACE,cAACgE,GAAD,CACI/H,aAAa,EACbF,MAAOoM,EACPnM,SAAU4M,GAAaqB,OACvB/N,YAAe,WAIrB,cAACE,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGN,UAAWP,EAAQoE,UAArC,SACE,cAACgE,GAAD,CACI/H,aAAa,EACbF,MAAOsM,EACPrM,SAAU4M,GAAaqC,OACvB/O,YAAe,eAGrB,cAACE,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGN,UAAWP,EAAQoE,UAArC,SACE,cAACgE,GAAD,CACI/H,aAAa,EACbF,MAAOwM,EACPvM,SAAU4M,GAAasC,OACvBhP,YAAe,qBAGrB,cAACE,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGN,UAAWP,EAAQoE,UAArC,SACE,cAACgE,GAAD,CACI/H,aAAa,EACbF,MAAO0M,EACPzM,SAAU4M,GAAaC,OACvB3M,YAAe,oBAGrB,cAACE,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGN,UAAWP,EAAQoE,UAArC,SACE,cAACgE,GAAD,CACI/H,aAAa,EACbF,MAAO8O,EACP7O,SAAU4M,GAAauC,OACvBjP,YAAe,mBAGrB,cAACE,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGN,UAAWP,EAAQoE,UAArC,SACE,cAACgE,GAAD,CACI/H,aAAa,EACbF,MAAOgP,EACP/O,SAAU4M,GAAawC,OACvBlP,YAAe,qBAInB,oBAAIC,UAAWP,EAAQoC,KAC3B,cAAC5B,EAAA,EAAD,CAAMjC,WAAS,EAACkC,UAAU,SAASE,WAAW,SAASlC,QAAS,EAAhE,SACE,eAAC8G,GAAD,CACEC,QAASA,GACTC,OAAO,EACPC,SAAS,EACTC,MAAM,EACN1F,QArGO,WACb1D,QAAQC,IAAI,qCACZuQ,IAAW,GnBoOR,SAAP,gDmBlOI5O,CACEoO,EACAE,EACAE,EACAE,EACAW,WAAWyB,GACTzB,WAAW2B,GACb/S,EACAN,GAEC2R,MAAK,WACJV,IAAW,GAGXP,EAAe,IACfE,EAAe,IACftB,EAAgB,wBAAyB,CAAEpK,QAAS,eAErD0M,OAAM,SAAClJ,GACNuI,IAAW,GACX3B,EAAgB,sBAAwB5G,EAAEmJ,QAAU,IAAK,CACxD3M,QAAS,QACT4M,iBAAkB,UAsEnB,UAOE,cAAC,KAAD,CAAoBrN,UAAWP,EAAQiO,aAPzC,oBCrNF7P,GAAYC,aAlBH,SAACC,GAAD,MAAY,CACzBwM,eAAgB,CACdjM,aAAcP,EAAMG,QAAQ,GAC5BD,QAASF,EAAMG,QAAQ,GACvB8C,cAAejD,EAAMG,QAAQ,GAC7B4F,SAAU,IACVhC,OAAQ,QAEVzH,MAAO,CACLuE,UAAW,SACXX,QAASF,EAAMG,QAAQ,IACvBuM,aAAc1M,EAAMG,QAAQ,IAE9ByM,OAAQ,CACNvI,UAAW,aA8CA+M,OAxCf,WACE,IAAM1P,EAAU5B,KAEhB,EAA4ByF,IAAMC,UAAS,GAA3C,mBAQA,OARA,UASE,gCACE,cAACsJ,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAO9M,UAAWP,EAAQ8K,eAA1B,SAPG,cAAC,GAAD,QAiBL,cAACtK,EAAA,EAAD,CACEjC,WAAS,EACTgC,UAAWP,EAAQkL,OACnBzK,UAAU,MACVC,eAAe,SACfC,WAAW,WALb,SAOE,qFACuD,IACrD,mBAAGmO,KAAK,4CAAR,2B,mBC/CIa,aAAY,CACtBvG,QAAS,CACLwG,QAAS,CACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,QAElBC,UAAW,CACPH,KAAM,UACNE,aAAc,c,sDChBpBE,GAAc,IAEL,SAASC,KACpB,OAEI,cADA,CACClG,GAAA,EAAD,WAGI,cAACmG,GAAA,EAAD,IACA,cAACC,GAAA,EAAD,CACInL,SAAS,QACT4B,GAAI,CAAElH,MAAM,eAAD,OAAiBsQ,GAAjB,OAAmC/H,GAAG,GAAD,OAAK+H,GAAL,OAFpD,SAII,cAACI,GAAA,EAAD,UACI,cAAC,KAAD,CAAYtP,QAAQ,KAAKuP,QAAM,EAACC,UAAU,MAA1C,kDAKR,eAACC,GAAA,EAAD,CACI3J,GAAI,CACAlH,MAAOsQ,GACPQ,WAAY,EACZ,qBAAsB,CAClB9Q,MAAOsQ,GACPS,UAAW,eAGnB3P,QAAQ,YACR4P,OAAO,OAVX,UAYI,cAACN,GAAA,EAAD,UAEQ,oBAAI/P,UAAU,cAAd,SACI,qBAAKqO,IAAKC,EAAMtO,UAAU,OAAOX,MAAQ,YAIrD,cAACiR,GAAA,EAAD,IAEClW,EAAUgK,KAAI,SAAC/D,EAAMgE,GAClB,OACI,cAACkM,GAAA,EAAD,CACIhK,GAAI,CAAEpH,WAAY,QAASqR,WAAY,OAAQpH,SAAU,cAAeqH,WAAW,YAAaC,cAAe,cAC/G5G,MAAQzJ,EAAKhG,MACZ2F,UAAWK,EAAK9F,MAChB0V,UAAaU,IACbC,GAAMvQ,EAAK/F,YAO5B,cAACoP,GAAA,EAAD,CACIuG,UAAU,OACV1J,GAAI,CAAEsK,SAAU,EAAGC,QAAS,qBAAsBC,EAAG,GAFzD,SAII,cAAChB,GAAA,EAAD,SCzDhB,IAAMhS,GAAQqR,aAAY,CACxBvG,QAAS,CACPwG,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,QAEhBC,UAAW,CACTH,KAAM,UACNE,aAAc,cAgDLuB,OA3Cf,WAEE,IACmB,IAAIlW,IAAOC,UAAUC,aAAaC,OAAOC,UAC1D,OACE,qBAAK8E,UAAU,MAAf,SACE,cAAC,IAAD,CAAkBiR,SAAU,EAA5B,SACE,eAACC,GAAA,EAAD,CAAenT,MAAOA,GAAtB,UAEE,cAAC6R,GAAD,IAEA,cAAC,KAAD,CACEuB,OAAK,EACLC,KAAK,gBACLnB,UAAWrF,KAEb,cAAC,KAAD,CACEuG,OAAK,EACLC,KAAK,WACLnB,UAAWd,KAEb,cAAC,KAAD,CACIgC,OAAK,EACLC,KAAK,cACLnB,UAAW9B,YAMvB,MAAOxS,GACP,OACE,qBAAKqE,UAAU,MAAf,SACE,cAAC,IAAD,CAAkBiR,SAAU,EAA5B,SACE,cAACC,GAAA,EAAD,CAAenT,MAAOA,GAAtB,SACE,cAAC,GAAD,YCpDGsT,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrE,MAAK,YAAkD,IAA/CsE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,QAIJC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.6d79bb23.chunk.js","sourcesContent":["export const MenuItems = [\n  {\n    title: \"Marketplace\",\n    url: \"/marketplace/\",\n    cName: \"nav-links\",\n  },\n\n  {\n    title: \"Deploy insurance?\",\n    url: \"/oracle/\",\n    cName: \"nav-links\",\n  },\n  {\n    title: \"Manage insurance\",\n    url: \"/liquidity/\",\n    cName: \"nav-links\",\n  },\n];\n","export default __webpack_public_path__ + \"static/media/logo.a6445847.svg\";","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport logo from \"../assets/img/logo.svg\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  state = { clicked: false };\n\n  render() {\n    return (\n      <nav>\n        <div className=\"Title\">\n          <h1 className=\"navbar-logo\">\n            <img src={logo} className=\"logo\" width = \"150\" height=\"82\"></img>\n          </h1>\n        </div>\n\n        <div className=\"NavbarItems\">\n          <ul className={`nav-menu`}>\n            {MenuItems.map((item, index) => {\n              return (\n                <li key={index}>\n                  <Link className={\"nav-links\"} to={item.url}>\n                    {item.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n\n","import { Contract, ethers } from \"ethers\";\nimport * as COINS from \"./constants/coins\";\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\nconst EVENT = require(\"./build/DeInsurance/Event.json\");\nconst CORE = require(\"./build/DeInsurance/Core_v2.json\");\n\nexport function getProvider() {\n  return new ethers.providers.Web3Provider(window.ethereum);\n}\n\nexport function getSigner(provider) {\n  return provider.getSigner();\n}\n\nexport function getRouter(address, signer) {\n  return new Contract(address, ROUTER.abi, signer);\n}\n\nexport function getCore(address, signer) {\n  return new Contract(address, CORE.abi, signer);\n}\n\nexport function getEvent(address, signer) {\n  return new Contract(address, EVENT.abi, signer);\n}\n\nexport function getWeth(address, signer) {\n  return new Contract(address, ERC20.abi, signer);\n}\n\nexport function getFactory(address, signer) {\n  return new Contract(address, FACTORY.abi, signer);\n}\n\nexport async function getAccount() {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n\n  return accounts[0];\n}\n\n//This function checks if a ERC20 token exists for a given address\n//    `address` - The Ethereum address to be checked\n//    `signer` - The current signer\nexport function doesTokenExist(address, signer) {\n  try {\n    return new Contract(address, ERC20.abi, signer);\n  } catch (err) {\n    return false;\n  }\n}\n\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function getBalanceAndSymbol(\n  accountAddress,\n  address,\n  provider,\n  signer\n) {\n  try {\n    if (address === COINS.AUTONITY.address) {\n      const balanceRaw = await provider.getBalance(accountAddress);\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: COINS.AUTONITY.abbr,\n      };\n    } else {\n      const token = new Contract(address, ERC20.abi, signer);\n      const balanceRaw = await token.balanceOf(accountAddress);\n      const symbol = await token.symbol();\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: symbol,\n      };\n    }\n  } catch (err) {\n    return false;\n  }\n}\n// the following function fetches the balance of user as an insurer and insured.\nexport async function getOptionBalanceAndSymbol(\n    isInsurer,\n    accountAddress,\n    eventAddress,\n    provider,\n    signer\n) {\n  try {\n      const event = new Contract(eventAddress, EVENT.abi, signer);\n      // the abi function should return a tuple [insurer, insured]\n      const balances = await event.getBalances();\n      const symbol = \"\";//await token.symbol();\n      // should return based on whether the staker is insurer or insured\n      if(isInsurer){\n        return {\n          balance: ethers.utils.formatEther(balances[0]),\n          symbol: symbol,\n        };\n      }else{\n        return {\n          balance: ethers.utils.formatEther(balances[1]),\n          symbol: symbol,\n        };\n      }\n\n  } catch (err) {\n    return false;\n  }\n}\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `amount` - A float or similar number representing the value of address1's token to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `signer` - The current signer\nexport async function swapTokens(\n  address1,\n  address2,\n  amount,\n  routerContract,\n  accountAddress,\n  signer\n) {\n  const tokens = [address1, address2];\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const amountIn = ethers.utils.parseEther(amount.toString());\n  const amountOut = await routerContract.callStatic.getAmountsOut(\n    amountIn,\n    tokens\n  );\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  await token1.approve(routerContract.address, amountIn);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth -> Token\n    await routerContract.swapExactETHForTokens(\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline,\n      { value: amountIn }\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token -> Eth\n    await routerContract.swapExactTokensForETH(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  } else {\n    await routerContract.swapExactTokensForTokens(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  }\n}\n// this function is supposed to be used to buy or provide insurance cover\nexport async function stake(\n    isInsurer,\n    tokenAddress,\n    amount,\n    coreAddress,\n    eventAddress,\n    signer\n) {\n  console.log(eventAddress);\n  console.log(tokenAddress);\n  // const tokens = [address1, address2];\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const amountIn = ethers.utils.parseEther(amount.toString());\n   console.log(amountIn);\n  // const amountOut = await routerContract.callStatic.getAmountsOut(\n  //     amountIn,\n  //     tokens\n  // );\n  console.log(\"stake1\");\n  //const token = new Contract(tokenAddress, ERC20.abi, signer);\n  console.log(\"stake2\");\n  //await token.approve(coreAddress, amountIn);\n  console.log(\"stake3\");\n\n  const coreContract = new Contract(coreAddress, CORE.abi, signer);\n  console.log(\"stake4\");\n\n  if (isInsurer){\n    console.log(\"stake5\");\n    await coreContract.provideInsurance(\n        eventAddress,\n        tokenAddress,\n        amountIn\n    )\n    console.log(\"stake5a\");\n  }else{\n    console.log(\"stake6\");\n    await coreContract.pruchaseInsurance(\n        eventAddress,\n        tokenAddress,\n        amountIn\n    )\n    console.log(\"stake6a\");\n  }\n\n}\n\n// this function is supposed to mint tokens\nexport async function mint(\n    amount,\n    coreAddress,\n    eventAddress,\n    signer\n) {\n  console.log(eventAddress);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const amountIn = ethers.utils.parseEther(amount.toString());\n  console.log(amountIn);\n  // const amountOut = await routerContract.callStatic.getAmountsOut(\n  //     amountIn,\n  //     tokens\n  // );\n\n  console.log(\"stake3\");\n\n  const coreContract = new Contract(coreAddress, CORE.abi, signer);\n  console.log(\"stake4\");\n\n    await coreContract.mintPositions(\n        eventAddress,\n        amountIn\n    )\n    console.log(\"stake5a\");\n\n}\n// this function is supposed to burn tokens\nexport async function burn(\n    amount,\n    coreAddress,\n    eventAddress,\n    signer\n) {\n  console.log(eventAddress);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const amountIn = ethers.utils.parseEther(amount.toString());\n  console.log(amountIn);\n  // const amountOut = await routerContract.callStatic.getAmountsOut(\n  //     amountIn,\n  //     tokens\n  // );\n\n  console.log(\"stake3\");\n\n  const coreContract = new Contract(coreAddress, CORE.abi, signer);\n  console.log(\"stake4\");\n\n  await coreContract.burnPositions(\n      eventAddress,\n      amountIn\n  )\n  console.log(\"stake5a\");\n\n}\n// this function is supposed to burn tokens\nexport async function redeem(\n    coreAddress,\n    eventAddress,\n    signer\n) {\n  console.log(eventAddress);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n\n  console.log(\"stake3\");\n\n  const coreContract = new Contract(coreAddress, CORE.abi, signer);\n  console.log(\"stake4\");\n\n  await coreContract.redeemPositions(\n      eventAddress\n  )\n  console.log(\"stake5a\");\n\n}\n// this function is supposed to buy insured tokens\nexport async function buy(\n    amount,\n    eventUniAddress,\n    signer\n) {\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const amountIn = ethers.utils.parseEther(amount.toString());\n  console.log(amountIn);\n  // const amountOut = await routerContract.callStatic.getAmountsOut(\n  //     amountIn,\n  //     tokens\n  // );\n\n  console.log(\"stake3\");\n\n  const uniContract = new Contract(eventUniAddress, CORE.abi, signer);\n  console.log(\"stake4\");\n\n  await uniContract.swap(\n      amountIn\n  )\n  console.log(\"stake5a\");\n\n}\n// this function is supposed to sell tokens\nexport async function sell(\n    amount,\n    eventUniAddress,\n    signer\n) {\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const amountIn = ethers.utils.parseEther(amount.toString());\n  console.log(amountIn);\n  // const amountOut = await routerContract.callStatic.getAmountsOut(\n  //     amountIn,\n  //     tokens\n  // );\n\n  console.log(\"stake3\");\n\n  const uniContract = new Contract(eventUniAddress, CORE.abi, signer);\n  console.log(\"stake4\");\n\n  await uniContract.swap(\n      amountIn\n  )\n  console.log(\"stake5a\");\n\n}\nexport async function trigger(\n    coreAddress,\n    eventAddress,\n    signer\n) {\n  const event = new Contract(eventAddress, EVENT.abi, signer);\n  const result = await event.triggger(true);\n}\n\nexport async function deployEvent(\n    name,\n    duration,\n    oracleAddress,\n    assetAddress,\n    settleRatio,\n    tokenRatio,\n    coreAddress,\n    signer\n) {\n  // const _duration = BigInt(duration.toString());\n  // const _settleRatio = BigInt(settleRatio.toString());\n  // const _tokenRatio = BigInt(tokenRatio.toString());\n  const coreContract= new Contract(coreAddress, CORE.abi, signer);\n  const result = await coreContract.deployEvent(name, duration, oracleAddress, assetAddress, settleRatio, tokenRatio);\n}\nexport async function withdraw(\n    isInsurer,\n    tokenAddress,\n    amount,\n    coreAddress,\n    eventAddress,\n    signer\n) {\n  const dummy = 3;\n}\n\n//This function returns the conversion rate between two token addresses\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\n//    `amountIn` - Amount of the token at address 1 to be swaped from\n//    `routerContract` - The router contract to carry out this swap\nexport async function getAmountOut(\n  address1,\n  address2,\n  amountIn,\n  routerContract\n) {\n  try {\n    const values_out = await routerContract.getAmountsOut(\n      ethers.utils.parseEther(amountIn),\n      [address1, address2]\n    );\n    const amount_out = ethers.utils.formatEther(values_out[1]);\n    return Number(amount_out);\n  } catch {\n    return false;\n  }\n}\n\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\n//    `pair` - The pair contract for the two tokens\nexport async function fetchReserves(address1, address2, pair) {\n  try {\n    const reservesRaw = await pair.getReserves();\n    let results = [\n      Number(ethers.utils.formatEther(reservesRaw[0])),\n      Number(ethers.utils.formatEther(reservesRaw[1])),\n    ];\n\n    return [\n      (await pair.token0()) === address1 ? results[0] : results[1],\n      (await pair.token1()) === address2 ? results[1] : results[0],\n    ];\n  } catch (err) {\n    console.log(\"no reserves yet\");\n    return [0, 0];\n  }\n}\n\n// this function is supposed to fetch the total stakes\nexport async function fetchStakes(pair) {\n  try {\n    const reservesRaw = await pair.getReserves();\n    let results = [\n      Number(ethers.utils.formatEther(reservesRaw[0])),\n      Number(ethers.utils.formatEther(reservesRaw[1])),\n    ];\n\n    return results;\n  } catch (err) {\n    console.log(\"no reserves yet\");\n    return [0, 0];\n  }\n}\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nexport async function getReserves(\n  address1,\n  address2,\n  eventAddress,\n  signer,\n  accountAddress\n) {\n  console.log(\"Reserves\");\n//  const pairAddress = await factory.getPair(address1, address2);\n  const event = new Contract(eventAddress, EVENT.abi, signer);\n\n  let insurance = await event.totalInsurance();\n  let premiums = await event.totalPremiums();\n  insurance = ethers.utils.formatEther(insurance);\n  premiums = ethers.utils.formatEther(premiums);\n  console.log(insurance);\n  console.log(premiums);\n  if (insurance === \"0.0\") {\n    premiums = \"0.0\";\n  }\n//  const liquidityTokens_BN = await pair.balanceOf(accountAddress);\n//  const liquidityTokens = Number(\n//    ethers.utils.formatEther(liquidityTokens_BN)\n//  ).toFixed(2);\n\n  return [\n    insurance,//.toFixed(2),\n    premiums,//.toFixed(2),\n    0,//liquidityTokens,\n  ];\n}\n","import React from \"react\";\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n  },\n  container_input: {\n    padding: theme.spacing(1),\n    minHeight: \"68px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n    marginLeft: \"50%\",\n    textAlign: \"right\",\n  },\n  container_blank: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    borderRadius: theme.spacing(2),\n  },\n  grid: {\n    height: \"60px\",\n  },\n  fab: {\n    zIndex: \"0\",\n  },\n  input: {\n    ...theme.typography.h5,\n    width: \"100%\",\n  },\n  inputBase: {\n    textAlign: \"right\",\n  },\n}));\n\nCoinField.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  symbol: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  activeField: PropTypes.bool.isRequired,\n};\n\nexport function RemoveLiquidityField1(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{\n              root: classes.container_input,\n              input: classes.inputBase,\n            }}\n          />\n        </Grid>\n        {/* </div> */}\n      </Grid>\n    </div>\n  );\n}\n\nexport function RemoveLiquidityField2(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol } = props;\n\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default function CoinField(props) {\n  // This component is used to selecting a token and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField, placeholder } = props;\n\n  return (\n    <div className={classes.container}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder={placeholder!==undefined?placeholder.toString():\"0.0\"}\n            disabled={!activeField}\n            classes={{ root: classes.input, input: classes.inputBase }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    width: \"100%\",\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n    \"&:hover, &$focusVisible\": {\n      backgroundColor: COLORS.grey[200],\n    },\n  },\n  coinName: {\n    opacity: 0.6,\n  },\n}));\n\nCoinButton.propTypes = {\n  coinName: PropTypes.string.isRequired,\n  coinAbbr: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default function CoinButton(props) {\n  const { coinName, coinAbbr, onClick, ...other } = props;\n  const classes = useStyles();\n\n  return (\n    <ButtonBase focusRipple className={classes.button} onClick={onClick}>\n      <Grid container direction=\"column\">\n        <Typography variant=\"h6\">{coinAbbr}</Typography>\n        <Typography variant=\"body2\" className={classes.coinName}>\n          {coinName}\n        </Typography>\n      </Grid>\n    </ButtonBase>\n  );\n}\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  TextField,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CoinButton from \"./CoinButton\";\nimport { doesTokenExist } from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n  titleSection: {\n    padding: theme.spacing(2),\n  },\n  titleText: {\n    alignSelf: \"center\",\n  },\n  hr: {\n    margin: 0,\n  },\n  address: {\n    paddingLeft: theme.spacing(2.5),\n    paddingRight: theme.spacing(2.5),\n    paddingBottom: theme.spacing(2),\n  },\n  coinList: {\n    height: \"300px\",\n    overflowY: \"scroll\",\n  },\n  coinContainer: {\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    paddingTop: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    overflow: \"hidden\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classes.titleSection}\n      {...other}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignContent=\"center\"\n      >\n        <Typography variant=\"h6\" className={classes.titleText}>\n          {children}\n        </Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </Grid>\n    </MuiDialogTitle>\n  );\n});\n\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n    backgroundColor: COLORS.grey[100],\n  },\n}))(MuiDialogActions);\n\nCoinDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  coins: PropTypes.array.isRequired,\n};\n\nexport default function CoinDialog(props) {\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n  // addresses will first be validated to make sure they exist.\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\n\n  const classes = useStyles();\n  const { onClose, open, coins, signer, heading, isPasteAddress, ...others } = props;\n\n  const [address, setAddress] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n\n  // Called when the user tries to input a custom address, this function will validate the address and will either\n  // then close the dialog and return the validated address, or will display an error.\n  const submit = () => {\n    if (doesTokenExist(address, signer)) {\n      exit(address);\n    } else {\n      setError(\"This address is not valid\");\n    }\n  };\n\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n  const exit = (value) => {\n    setError(\"\");\n    setAddress(\"\");\n    onClose(value);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => exit(undefined)}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <DialogTitle onClose={() => exit(undefined)}>{heading}</DialogTitle>\n\n      <hr className={classes.hr} />\n\n      <div className={classes.coinContainer}>\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\n          {isPasteAddress === true &&\n          <TextField\n              value={address}\n              onChange={(e) => setAddress(e.target.value)}\n              variant=\"outlined\"\n              placeholder=\"Paste Address\"\n              error={error !== \"\"}\n              helperText={error}\n              fullWidth\n              className={classes.address}\n          />\n          }\n          {isPasteAddress === true &&\n          <hr className={classes.hr}/>\n          }\n          <Grid item className={classes.coinList}>\n            <Grid container direction=\"column\">\n              {/* Maps all of the tokens in the constants file to buttons */}\n              {coins.map((coin, index) => (\n                <Grid item key={index} xs={12}>\n                  <CoinButton\n                    coinName={coin.name}\n                    coinAbbr={coin.abbr}\n                    onClick={() => exit([coin.isCoin, coin.isInsurer, coin.address, coin.abbr, coin.name])}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n\n      <hr className={classes.hr} />\n\n      <DialogActions>\n        <Button autoFocus onClick={submit} color=\"primary\">\n          Enter\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport {\n    Button,\n    Dialog,\n    Grid,\n    IconButton,\n    makeStyles,\n    TextField,\n    Typography,\n    withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CoinButton from \"./CoinButton\";\nimport { doesTokenExist } from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst styles = (theme) => ({\n    dialogContainer: {\n        borderRadius: theme.spacing(2),\n    },\n    titleSection: {\n        padding: theme.spacing(2),\n    },\n    titleText: {\n        alignSelf: \"center\",\n    },\n    hr: {\n        margin: 0,\n    },\n    address: {\n        paddingLeft: theme.spacing(2.5),\n        paddingRight: theme.spacing(2.5),\n        paddingBottom: theme.spacing(2),\n    },\n    coinList: {\n        height: \"300px\",\n        overflowY: \"scroll\",\n    },\n    coinContainer: {\n        paddingLeft: theme.spacing(0.5),\n        paddingRight: theme.spacing(0.5),\n        paddingTop: theme.spacing(2),\n        marginTop: theme.spacing(2),\n        overflow: \"hidden\",\n    },\n});\n\nconst useStyles = makeStyles(styles);\n\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\nconst DialogTitle = withStyles(styles)((props) => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n        <MuiDialogTitle\n            disableTypography\n            className={classes.titleSection}\n            {...other}\n        >\n            <Grid\n                container\n                direction=\"row\"\n                justifyContent=\"space-between\"\n                alignContent=\"center\"\n            >\n                <Typography variant=\"h6\" className={classes.titleText}>\n                    {children}\n                </Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </Grid>\n        </MuiDialogTitle>\n    );\n});\n\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n        backgroundColor: COLORS.grey[100],\n    },\n}))(MuiDialogActions);\n\nInputDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    events: PropTypes.array.isRequired,\n};\n\nexport default function InputDialog(props) {\n    // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\n    // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n    // addresses will first be validated to make sure they exist.\n    // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n    // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\n\n    const classes = useStyles();\n    const { onClose, open, events, signer, heading, isPasteAddress, ...others } = props;\n\n    const [address, setAddress] = React.useState(\"\");\n    const [error, setError] = React.useState(\"\");\n\n    // Called when the user tries to input a custom address, this function will validate the address and will either\n    // then close the dialog and return the validated address, or will display an error.\n    const submit = () => {\n        if (doesTokenExist(address, signer)) {\n            exit(address);\n        } else {\n            setError(\"This address is not valid\");\n        }\n    };\n\n    // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n    const exit = (value) => {\n        setError(\"\");\n        setAddress(\"\");\n        onClose(value);\n    };\n\n    return (\n        <Dialog\n            open={open}\n            onClose={() => exit(undefined)}\n            fullWidth\n            maxWidth=\"sm\"\n            classes={{ paper: classes.dialogContainer }}\n        >\n            <DialogTitle onClose={() => exit(undefined)}>{heading}</DialogTitle>\n\n            <hr className={classes.hr} />\n\n            <div className={classes.coinContainer}>\n                <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\n                    {isPasteAddress === true &&\n                    <TextField\n                        value={address}\n                        onChange={(e) => setAddress(e.target.value)}\n                        variant=\"outlined\"\n                        placeholder=\"Paste Address\"\n                        error={error !== \"\"}\n                        helperText={error}\n                        fullWidth\n                        className={classes.address}\n                    />\n                    }\n                    {isPasteAddress === true &&\n                    <hr className={classes.hr}/>\n                    }\n                    <Grid item className={classes.coinList}>\n                        <Grid container direction=\"column\">\n                            {/* Maps all of the tokens in the constants file to buttons */}\n                            {events.map((event, index) => (\n                                <Grid item key={index} xs={12}>\n                                    <CoinButton\n                                        coinName={index+1}\n                                        coinAbbr={event.name}\n                                        onClick={() => exit([event.name, index, event.array])}\n                                    />\n                                </Grid>\n                            ))}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n\n            <hr className={classes.hr} />\n\n            <DialogActions>\n                <Button autoFocus onClick={submit} color=\"primary\">\n                    Enter\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React from \"react\";\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: 0,\n    position: \"relative\",\n  },\n  progress: {\n    color: green[500],\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nexport default function LoadingButton(props) {\n  const classes = useStyles();\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth\n        disabled={loading || !valid}\n        type=\"submit\"\n        onClick={onClick}\n        {...other}\n      >\n        {children}\n      </Button>\n      {loading && <CircularProgress size={24} className={classes.progress} />}\n    </div>\n  );\n}\n","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Grow from '@mui/material/Grow';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport MenuItem from '@mui/material/MenuItem';\nimport MenuList from '@mui/material/MenuList';\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport {CircularProgress, makeStyles} from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport Box from \"@mui/material/Box\";\nimport ListItemText from '@mui/material/ListItemText';\n// const options = ['Buy', 'Sell'];\n\nconst useStyles = makeStyles((theme) => ({\n    wrapper: {\n        margin: 0,\n        position: \"relative\",\n    },\n    progress: {\n        color: green[500],\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        marginTop: -12,\n        marginLeft: -12,\n    },\n}));\nexport default function SplitButton(props) {\n    const {onClick, options, ...other} = props;\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n    const handleClick = () => (\n        onClick[selectedIndex]()\n        // onClickArray[selectedIndex]\n        // console.info(`You clicked ${options[selectedIndex]}`)\n);\n\n    const handleMenuItemClick = (event, index) => {\n        setSelectedIndex(index);\n        setOpen(false);\n    };\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <React.Fragment>\n            <ButtonGroup variant=\"contained\" ref={anchorRef} /*aria-label=\"split button\"*/>\n                <Button\n                    color=\"primary\"\n                    size=\"medium\"\n                    onClick={handleClick}\n                >\n                    <LoopIcon />\n                    {options[selectedIndex]}\n\n                </Button>\n\n                <Button\n                    size=\"small\"\n                    color=\"primary\"\n                    aria-controls={open ? 'split-button-menu' : undefined}\n                    aria-expanded={open ? 'true' : undefined}\n                    aria-label=\"select action\"\n                    aria-haspopup=\"menu\"\n                    onClick={handleToggle}\n                >\n                    <ArrowDropDownIcon />\n                </Button>\n            </ButtonGroup>\n            <Popper\n                sx={{\n                    zIndex: 1,\n                }}\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n            >\n                {({ TransitionProps, placement }) => (\n                    <Grow\n                        {...TransitionProps}\n                        style={{\n                            transformOrigin:\n                                placement === 'bottom' ? 'center top' : 'center bottom',\n                        }}\n                    >\n                        {/*<Box display=\"block\">*/}\n                        <Paper\n                            variant={\"elevation\"}\n                            sx={{ width: 120 }}\n                        >\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MenuList id=\"split-button-menu\" autoFocusItem dense>\n                                    {options.map((option, index) => (\n                                        <MenuItem\n                                            key={option}\n                                            // divider='true'\n                                            // disableGutters='true'\n                                            // disabled={index === 2}\n                                            selected={index === selectedIndex}\n                                            onClick={(event) => handleMenuItemClick(event, index)}\n                                        >\n                                            <ListItemText sx={{ ml:2 }}> {option} </ListItemText>\n                                        </MenuItem>\n                                    ))}\n\n                                </MenuList>\n                            </ClickAwayListener>\n                        </Paper>\n                        {/*</Box>*/}\n                    </Grow>\n                )}\n            </Popper>\n        </React.Fragment>\n    );\n}","import React from \"react\";\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        padding: theme.spacing(1),\n        minHeight: \"80px\",\n        backgroundColor: COLORS.grey[50],\n        borderRadius: theme.spacing(2),\n        borderColor: COLORS.grey[300],\n        borderWidth: \"1px\",\n        borderStyle: \"solid\",\n    },\n    container_input: {\n        padding: theme.spacing(1),\n        minHeight: \"68px\",\n        backgroundColor: COLORS.grey[50],\n        borderRadius: theme.spacing(2),\n        borderColor: COLORS.grey[300],\n        borderWidth: \"1px\",\n        borderStyle: \"solid\",\n        marginLeft: \"50%\",\n        textAlign: \"right\",\n    },\n    container_blank: {\n        padding: theme.spacing(1),\n        minHeight: \"80px\",\n        borderRadius: theme.spacing(2),\n    },\n    grid: {\n        height: \"60px\",\n    },\n    fab: {\n        zIndex: \"0\",\n    },\n    input: {\n        ...theme.typography.h5,\n        width: \"100%\",\n    },\n    inputBase: {\n        textAlign: \"right\",\n    },\n}));\n\nInputField.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    symbol: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func,\n    activeField: PropTypes.bool.isRequired,\n};\n\n\nexport default function InputField(props) {\n    // This component is used to selecting a token and entering a value, the props are explained below:\n    //      onClick - (string) => void - Called when the button is clicked\n    //      symbol - string - The text displayed on the button\n    //      value - string - The value of the text field\n    //      onChange - (e) => void - Called when the text field changes\n    //      activeField - boolean - Whether text can be entered into this field or not\n\n    const classes = useStyles();\n    const { onClick, symbol, value, onChange, activeField, placeholder } = props;\n\n    return (\n        <div className={classes.container}>\n            <Grid\n                container\n                direction=\"row\"\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n                className={classes.grid}\n            >\n                {/* Text Field */}\n                <Grid item xs={9}>\n                    <InputBase\n                        value={value}\n                        onChange={onChange}\n                        placeholder={placeholder!==undefined?placeholder.toString():\"0.0\"}\n                        disabled={!activeField}\n                        classes={{ root: classes.input, input: classes.inputBase }}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n","export const USDC = {\n    isCoin: true,\n    isInsurer: false,\n    name: \"USDC\",\n    abbr: \"USDC\",\n    address: \"0xaFF4481D10270F50f203E0763e2597776068CBc5\", // Weth address\n};\nexport const WETH = {\n    isCoin: true,\n    isInsurer: false,\n    name: \"WRAPPED ETHEREUM\",\n    abbr: \"WETH\",\n    address: \"0xaFF4481D10270F50f203E0763e2597776068CBc5\", // Weth address\n};\n\nexport const WBTC = {\n    isCoin: true,\n    isInsurer: false,\n    name: \"WRAPPED BITCOIN\",\n    abbr: \"WBTC\",\n    address: \"0xaFF4481D10270F50f203E0763e2597776068CBc5\", // Weth address\n};\nexport const DEADLINE = [\n    {\n        name: \"1 December, 2022\"\n    },\n    {\n        name: \"1 June, 2023\"\n    },\n    {\n        name: \"1 December, 2023\"\n    },\n    {\n        name: \"1 December, 2024\"\n    },\n];\n\nexport const EVENTADDR = [\n    {\n        event: \"0x1FbF370cd78dB6023a29471a9B81E81C615601Dd\",\n        exchnge: \"0xdE37588BE3d92bC80BD55db7B6ECd95714c44DbA\",\n    },\n    {\n     event: \"0x1FbF370cd78dB6023a29471a9B81E81C615601Dd\",\n        exchnge: \"0xdE37588BE3d92bC80BD55db7B6ECd95714c44DbA\",\n    },\n    {\n     event:   \"0x1FbF370cd78dB6023a29471a9B81E81C615601Dd\",\n     exchnge: \"0xdE37588BE3d92bC80BD55db7B6ECd95714c44DbA\",\n    }\n];\n\nexport const ORACLE = [\n    {\n        name: \"ETH/USDT < 1900\",\n    },\n    {\n        name: \"BTC/USDT < 9000\",\n    }\n]\n\nexport const ALLEVENTS = [\n    {\n     name: ORACLE[0].name,\n     array:  [\n         {\n             name: USDC.name,\n             array: [{name: DEADLINE[0].name,\n                 array: [EVENTADDR[0].event, EVENTADDR[0].exchnge]\n             }, ]\n         },\n         {\n             name: WBTC.name,\n             array: [{name: DEADLINE[1].name,\n                 array: [EVENTADDR[1].event, EVENTADDR[1].exchnge]\n             }]\n         }\n         ]\n    },\n\n    {\n     name: ORACLE[1].name,\n     array: [\n         {  name: USDC.name,\n            array: [\n                {\n             name: DEADLINE[0].name,\n                array: [EVENTADDR[2].event, EVENTADDR[2].exchnge]\n             }\n         ]\n         },\n          ]\n    }\n\n]","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport StepConnector, { stepConnectorClasses } from '@mui/material/StepConnector';\nimport { styled } from '@mui/material/styles';\nimport Check from '@mui/icons-material/Check';\nimport PropTypes from 'prop-types';\n\nconst QontoConnector = styled(StepConnector)(({ theme }) => ({\n    [`&.${stepConnectorClasses.alternativeLabel}`]: {\n        top: 10,\n        left: 'calc(-50% + 16px)',\n        right: 'calc(50% + 16px)',\n    },\n    [`&.${stepConnectorClasses.active}`]: {\n        [`& .${stepConnectorClasses.line}`]: {\n            borderColor: '#784af4',\n        },\n    },\n    [`&.${stepConnectorClasses.completed}`]: {\n        [`& .${stepConnectorClasses.line}`]: {\n            borderColor: '#784af4',\n        },\n    },\n    [`& .${stepConnectorClasses.line}`]: {\n        borderColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\n        borderTopWidth: 3,\n        borderRadius: 1,\n    },\n}));\n\nconst QontoStepIconRoot = styled('div')(({ theme, ownerState }) => ({\n    color: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#eaeaf0',\n    display: 'flex',\n    height: 22,\n    alignItems: 'center',\n    ...(ownerState.active && {\n        color: '#784af4',\n    }),\n    '& .QontoStepIcon-completedIcon': {\n        color: '#784af4',\n        zIndex: 1,\n        fontSize: 18,\n    },\n    '& .QontoStepIcon-circle': {\n        width: 8,\n        height: 8,\n        borderRadius: '50%',\n        backgroundColor: 'currentColor',\n    },\n}));\n\nfunction QontoStepIcon(props) {\n    const { active, completed, className } = props;\n\n    return (\n        <QontoStepIconRoot ownerState={{ active }} className={className}>\n            {completed ? (\n                <Check className=\"QontoStepIcon-completedIcon\" />\n            ) : (\n                <div className=\"QontoStepIcon-circle\" />\n            )}\n        </QontoStepIconRoot>\n    );\n}\n\nQontoStepIcon.propTypes = {\n    /**\n     * Whether this step is active.\n     * @default false\n     */\n    active: PropTypes.bool,\n    className: PropTypes.string,\n    /**\n     * Mark the step as completed. Is passed to child components.\n     * @default false\n     */\n    completed: PropTypes.bool,\n};\n\nconst steps = ['Select Oracle Id', 'Select available asset (you want to deal in)', 'Select available deadline', 'Provide premium amount'];\n\nexport default function HorizontalLinearStepper(props) {\n    const {activeStep, ...other} = props;\n    // const [activeStep, setActiveStep] = React.useState(0);\n    const [skipped, setSkipped] = React.useState(new Set());\n\n    // const isStepOptional = (step) => {\n    //     // return step === 1;\n    // return false\n    // };\n\n    // const isStepSkipped = (step) => {\n    //     return skipped.has(step);\n    // };\n\n    // const handleNext = () => {\n    //     let newSkipped = skipped;\n    //     if (isStepSkipped(activeStep)) {\n    //         newSkipped = new Set(newSkipped.values());\n    //         newSkipped.delete(activeStep);\n    //     }\n    //\n    //     setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    //     setSkipped(newSkipped);\n    // };\n\n    // const handleBack = () => {\n    //     setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    // };\n\n    // const handleSkip = () => {\n    //     if (!isStepOptional(activeStep)) {\n    //         // You probably want to guard against something like this,\n    //         // it should never occur unless someone's actively trying to break something.\n    //         throw new Error(\"You can't skip a step that isn't optional.\");\n    //     }\n    //\n    //     setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    //     setSkipped((prevSkipped) => {\n    //         const newSkipped = new Set(prevSkipped.values());\n    //         newSkipped.add(activeStep);\n    //         return newSkipped;\n    //     });\n    // };\n\n    // const handleReset = () => {\n    //     setActiveStep(0);\n    // };\n\n    return (\n        <Box sx={{ width: '58%',ml: 70, mb: 1}}>\n            <Stepper alternativeLabel activeStep={activeStep} connector={<QontoConnector />}>\n                {steps.map((label, index) => {\n                    const stepProps = {};\n                    const labelProps = {};\n                    // if (isStepOptional(index)) {\n                    //     labelProps.optional = (\n                    //         <Typography variant=\"caption\">Optional</Typography>\n                    //     );\n                    // }\n                    // if (isStepSkipped(index)) {\n                    //     stepProps.completed = false;\n                    // }\n                    return (\n                        <Step key={label} {...stepProps}>\n                            <StepLabel  StepIconComponent={QontoStepIcon} {...labelProps}>{label}</StepLabel>\n                        </Step>\n                    );\n                })}\n            </Stepper>\n            {activeStep === steps.length ? (\n                <React.Fragment>\n                    <Typography sx={{ mt: 2, mb: 1 }}>\n                        All steps completed - you can get insured now.\n                    </Typography>\n                    <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n                        <Box sx={{ flex: '1 1 auto' }} />\n                        {/*<Button onClick={handleReset}>Reset</Button>*/}\n                    </Box>\n                </React.Fragment>\n            ) : (\n                <React.Fragment>\n                    <Typography sx={{ mt: 2, mb: 1 }}>Step {activeStep + 1}</Typography>\n                    <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n                        {/*<Button*/}\n                        {/*    color=\"inherit\"*/}\n                        {/*    disabled={activeStep === 0}*/}\n                        {/*    onClick={handleBack}*/}\n                        {/*    sx={{ mr: 1 }}*/}\n                        {/*>*/}\n                        {/*    Back*/}\n                        {/*</Button>*/}\n                        <Box sx={{ flex: '1 1 auto' }} />\n                        {/*{isStepOptional(activeStep) && (*/}\n                        {/*    <Button color=\"inherit\" onClick={handleSkip} sx={{ mr: 1 }}>*/}\n                        {/*        Skip*/}\n                        {/*    </Button>*/}\n                        {/*)}*/}\n\n                        {/*<Button onClick={handleNext}>*/}\n                        {/*    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}*/}\n                        {/*</Button>*/}\n                    </Box>\n                </React.Fragment>\n            )}\n        </Box>\n    );\n}","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport AlarmIcon from \"@material-ui/icons/Alarm\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getCore,\n  getEvent,\n  getSigner,\n  getAmountOut,\n  getBalanceAndSymbol,\n  getWeth,\n  swapTokens,\n  getReserves, getOptionBalanceAndSymbol, stake, withdraw, trigger, buy, sell\n} from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport InputDialog from \"./InputDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport SplitButton from \"../Components/SplitButton\";\nimport InputField from \"../Liquidity/components/InputField\";\nimport * as COINS from \"../constants/coins\";\nimport * as EVENTS from \"../constants/events\";\nimport {symbol} from \"prop-types\";\nimport HorizontalLinearStepper from \"./Stepper\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    backgroundColor: '#dfe1f5'\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  footer: {\n    marginTop: \"285px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CoinSwapper(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores information for the insurance smart contracts\n\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n\n  const [coreAddress, setCoreAddress] = React.useState(\n    \"0xde68D58ba403be67703B903c99932A854A233dEF\"\n  );\n  const [eventAddress, setEventAddress] = React.useState(\n    \"0x\"\n  );\n  const [exchangeAddress, setExchangeAddress] = React.useState(\n      \"0x\"\n  );\n  const [weth, setWeth] = React.useState(\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\n  );\n\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [dialog3Open, setDialog3Open] = React.useState(false);\n  const [activeStep, setActiveStep] = React.useState(0);\n  //TODO\n\n  // Stores data about their respective input\n\n  const [input1, setInput1] = React.useState({\n    isSelected: false,\n    index: undefined,\n    name: undefined,\n  });\n\n  const [input2, setInput2] = React.useState({\n    isSelected: false,\n    index: undefined,\n    name: undefined,\n  });\n\n  const [input3, setInput3] = React.useState({\n    isSelected: false,\n    index: undefined,\n    name: undefined,\n  });\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n  const [field3Value, setField3Value] = React.useState(\"\");\n  const [field4Value, setField4Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field4: (e) => {\n      setField4Value(e.target.value);\n      setActiveStep(4);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  // const formatBalance = (balance, symbol) => {\n  //   if (balance && symbol)\n  //     return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n  //   else return \"0.0\";\n  // };\n  //\n  // // Turns the coin's reserves into something nice and readable\n  // const formatReserve = (reserve, symbol) => {\n  //   if (reserve && symbol) return reserve + \" \" + symbol;\n  //   else return \"0.0\";\n  // };\n\n  // Determines whether the button should be enabled or not\n  // const isButtonEnabled = () => {\n  //   let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n  //\n  //   // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n  //   return (\n  //     coin1.address &&\n  //     coin2.address &&\n  //     validFloat.test(field1Value) &&\n  //     parseFloat(field1Value) <= coin1.balance\n  //   );\n  // };\n\n  const onInput1Selected = (inp) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // We only update the values if the user provides a token\n\n    // Getting some token data is async, so we need to wait for the data to return, hence the promise\n    if (inp !== undefined) {\n      setInput1(\n          {\n            isSelected: true,\n            name: inp[0],\n            index: inp[1],\n          }\n      );\n      setField1Value(\n          \"Oracle: \"+inp[0]\n      )\n      setActiveStep(1);\n    }\n\n  };\n  const onInput2Selected = (inp) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // We only update the values if the user provides a token\n\n    // Getting some token data is async, so we need to wait for the data to return, hence the promise\n    if (inp !== undefined) {\n      setInput2(\n          {\n            isSelected: true,\n            name: inp[0],\n            index: inp[1],\n          }\n      );\n      setField2Value(\n         \"Asset: \" +inp[0]\n      )\n      setActiveStep(2);\n    }\n\n  };\n\n  const onInput3Selected = (inp) => {\n    // Close the dialog window\n    setDialog3Open(false);\n\n    // We only update the values if the user provides a token\n\n    // Getting some token data is async, so we need to wait for the data to return, hence the promise\n    if (inp !== undefined) {\n      setInput3(\n          {\n            isSelected: true,\n            name: inp[0],\n            index: inp[1],\n          }\n      );\n      setField3Value(\n          \"Deadline: \"+inp[0]\n      )\n      setEventAddress(inp[2].event);\n      setExchangeAddress(inp[2].exchnge);\n      setActiveStep(3);\n    }\n\n  };\n\n  const buyOption = () => {\n    console.log(\"Attempting to stake...\");\n    console.log(provider);\n    console.log(signer.getAddress());\n    setLoading(true);\n\n    buy(\n        parseFloat(field4Value),\n        exchangeAddress,\n        signer\n    )\n        .then(() => {\n          setLoading(false);\n\n          // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n          setField1Value(\"\");\n          enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n        })\n        .catch((e) => {\n          setLoading(false);\n          enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n            variant: \"error\",\n            autoHideDuration: 10000,\n          });\n        });\n  };\n  const sellOption = () => {\n    console.log(\"Attempting to stake...\");\n    console.log(provider);\n    console.log(signer.getAddress());\n    setLoading(true);\n\n    sell(\n        parseFloat(field1Value),\n        exchangeAddress,\n        signer\n    )\n        .then(() => {\n          setLoading(false);\n\n          // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n          setField1Value(\"\");\n          enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n        })\n        .catch((e) => {\n          setLoading(false);\n          enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n            variant: \"error\",\n            autoHideDuration: 10000,\n          });\n        });\n  };\n\n\n  const triggerOption = () => {\n    console.log(\"Attempting to trigger...\");\n    setLoading(true);\n\n    trigger(\n        coreAddress,\n        eventAddress,\n        signer\n    )\n        .then(() => {\n          setLoading(false);\n          enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n        })\n        .catch((e) => {\n          setLoading(false);\n          enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n            variant: \"error\",\n            autoHideDuration: 10000,\n          });\n        });\n  };\n\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  // useEffect(() => {\n  //   console.log(\n  //     \"Trying to get Reserves between:\\n\" + option1.address + \"\\n\" + option2.address\n  //   );\n  //\n  //   if (option1.address) {\n  //     getReserves(option1.address, option2.address, eventAddress, signer, account).then(\n  //       (data) => setReserves(data)\n  //     );\n  //   }\n  // }, [option1.address, option2.address, account, factory, router, signer]);\n\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n  // useEffect(() => {\n  //   if (isNaN(parseFloat(field1Value))) {\n  //     setField2Value(\"\");\n  //   } else if (reserves[0] && reserves[1]) {\n  //     if (option2.isInsurer){\n  //       setField2Value(`${100*reserves[1]/reserves[0]}%`);\n  //     }else{\n  //       setField2Value(`${100*reserves[0]/reserves[1]}%`);\n  //\n  //     }\n  //\n  //     // getAmountOut(coin1.address, coin2.address, field1Value, router).then(\n  //     //   (amount) => setField2Value(amount.toFixed(7))\n  //     // );\n  //   } else {\n  //     setField2Value(\"\");\n  //   }\n  // }, [field1Value, coin1.address, coin2.address]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  // useEffect(() => {\n  //   const coinTimeout = setTimeout(() => {\n  //     console.log(\"Checking balances...\");\n  //\n  //     if (option1.address) {\n  //       getReserves(\n  //         option1.address,\n  //         coin2.address,\n  //         eventAddress,\n  //         signer,\n  //         account\n  //       ).then((data) => setReserves(data));\n  //     }\n  //\n  //     if (option1.address) {\n  //       getOptionBalanceAndSymbol(option2.isInsurer, account, eventAddress, provider, signer).then(\n  //         (data) => {\n  //                   setOption2({\n  //                     isCoin: false,\n  //                     isInsurer: option2.isInsurer,\n  //                     address: undefined,\n  //                     symbol: option2.symbol,\n  //                     balance: data.balance,\n  //                   });\n  //         }\n  //       );\n  //     }\n  //     if (coin2 && account) {\n  //       getBalanceAndSymbol(account, coin2.address, provider, signer).then(\n  //         (data) => {\n  //           setCoin2({\n  //             ...coin2,\n  //             balance: data.balance,\n  //           });\n  //         }\n  //       );\n  //     }\n  //   }, 5000);\n  //\n  //   return () => clearTimeout(coinTimeout);\n  // });\n  //\n  // // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n  // useEffect(() => {\n  //   getAccount().then((account) => {\n  //     setAccount(account);\n  //   });\n  // });\n\n  return (\n    <div>\n      <HorizontalLinearStepper\n      activeStep = {activeStep}\n      />\n      {/* Dialog Windows */}\n      <InputDialog\n        open={dialog1Open}\n        onClose={onInput1Selected}\n        events={EVENTS.ALLEVENTS}\n        signer={signer}\n        heading = {\"Select Oracle ID\"}\n        isPasteAddress = {false}\n      />\n      <InputDialog\n        open={dialog2Open}\n        onClose={onInput2Selected}\n        events={input1.isSelected ? EVENTS.ALLEVENTS[input1.index].array : []}\n        signer={signer}\n        heading = {\"Select asset\"}\n        isPasteAddress = {false}\n      />\n      <InputDialog\n          open={dialog3Open}\n          onClose={onInput3Selected}\n          events={input2.isSelected ? EVENTS.ALLEVENTS[input1.index].array[input2.index].array : []}\n          signer={signer}\n          heading = {\"Select deadline\"}\n          isPasteAddress = {false}\n      />\n\n      {/* insurance marketplace */}\n      <Container maxWidth=\"sm\" >\n        <Paper className={classes.paperContainer} >\n          <Typography variant=\"h5\" className={classes.title}>\n            How you doin today?\n          </Typography>\n\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}  >\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={true}\n                value={field1Value}\n                onClick={() => setDialog1Open(true)}\n                placeholder={\"Select Oracle Id\"}\n                // symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n                symbol={input1.isSelected !== false ? \"Done\" : \"Select\"}\n              />\n            </Grid>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={true}\n                value={field2Value}\n                onClick={() => setDialog2Open(true)}\n                placeholder={\"Select asset\"}\n                // symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n                symbol={input2.isSelected !== false ? \"Done\" : \"Select\"}\n              />\n            </Grid>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                  activeField={true}\n                  value={field3Value}\n                  onClick={() => setDialog3Open(true)}\n                  placeholder={\"Select deadline\"}\n                  // symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n                  symbol={input3.isSelected !== false ? \"Done\" : \"Select\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.fullWidth}>\n              <InputField\n                  activeField={true}\n                  value={field4Value}\n                  onChange={handleChange.field4}\n                  onClick={() => setDialog3Open(true)}\n                  placeholder={\"Enter premium $\"}\n              />\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Balance Display */}\n            <Typography variant=\"h6\">Fetching coverage</Typography>\n\n                <Typography variant=\"body1\" className={classes.balance}>\n                  TODO\n                  {/*{formatBalance(option2.balance, option1.symbol)}*/}\n                </Typography>\n\n\n            <hr className={classes.hr} />\n\n            {/* Reserves Display */}\n            {/*we don't need to */}\n            {/*<Typography variant=\"h6\">Reserves</Typography>*/}\n\n            {/*<Grid container direction=\"row\" justifyContent=\"space-between\">*/}\n            {/*  <Grid item xs={6}>*/}\n            {/*    <Typography variant=\"body1\" className={classes.balance}>*/}\n            {/*      {formatReserve(reserves[0], option1.symbol!==undefined ? `${option1.symbol} insuring` : \"\")}*/}\n            {/*    </Typography>*/}\n            {/*  </Grid>*/}\n            {/*  <Grid item xs={6}>*/}\n            {/*    <Typography variant=\"body1\" className={classes.balance}>*/}\n            {/*      {formatReserve(reserves[1], option1.symbol!==undefined ? `${option1.symbol} insured` : \"\")}*/}\n            {/*    </Typography>*/}\n            {/*  </Grid>*/}\n            {/*</Grid>*/}\n\n\n            <SplitButton\n            onClick={[buyOption, sellOption]}\n            options = {['Buy', 'Sell']}\n            >\n\n            </SplitButton>\n            <hr className={classes.hr} />\n\n              <Grid item xs={6}>\n                <LoadingButton\n                    loading={loading}\n                    valid={true}\n                    success={false}\n                    fail={false}\n                    onClick={triggerOption}\n                >\n                  <AlarmIcon />\n                  Trigger\n                </LoadingButton>\n              </Grid>\n\n          </Grid>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          @Becoz-we-can klabs\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default CoinSwapper;\n","import { Contract, ethers } from \"ethers\";\nimport * as COINS from \"../constants/coins\";\n\nimport { fetchReserves } from \"../ethereumFunctions\";\n\nconst ERC20 = require(\"../build/ERC20.json\");\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\n\n// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's coin to add\n//    `amount2` - A float or similar number representing the value of address2's coin to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function addLiquidity(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const amountIn1 = ethers.utils.parseEther(amount1.toString());\n  const amountIn2 = ethers.utils.parseEther(amount2.toString());\n\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  await token1.approve(routerContract.address, amountIn1);\n  await token2.approve(routerContract.address, amountIn2);\n\n  console.log([\n    address1,\n    address2,\n    Number(amountIn1),\n    Number(amountIn2),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth + Token\n    await routerContract.addLiquidityETH(\n      address2,\n      amountIn2,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline,\n      { value: amountIn1 }\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token + Eth\n    await routerContract.addLiquidityETH(\n      address1,\n      amountIn1,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline,\n      { value: amountIn2 }\n    );\n  } else {\n    // Token + Token\n    await routerContract.addLiquidity(\n      address1,\n      address2,\n      amountIn1,\n      amountIn2,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\n// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function removeLiquidity(\n  address1,\n  address2,\n  liquidity_tokens,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer,\n  factory\n) {\n  const liquidity = ethers.utils.parseEther(liquidity_tokens.toString());\n\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  await pair.approve(routerContract.address, liquidity);\n\n  console.log([\n    address1,\n    address2,\n    Number(liquidity),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth + Token\n    await routerContract.removeLiquidityETH(\n      address2,\n      liquidity,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token + Eth\n    await routerContract.removeLiquidityETH(\n      address1,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  } else {\n    // Token + Token\n    await routerContract.removeLiquidity(\n      address1,\n      address2,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\nconst quote = (amount1, reserve1, reserve2) => {\n  const amount2 = amount1 * (reserve2 / reserve1);\n  const amountOut = Math.sqrt(amount2 * amount1);\n  return [amount2, amountOut];\n};\n\n// Function used to get a quote of the liquidity addition\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteAddLiquidity(\n  address1,\n  address2,\n  amountADesired,\n  amountBDesired,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  if (reserveA === 0 && reserveB === 0) {\n    let amountOut = Math.sqrt(reserveA * reserveB);\n    return [\n      amountADesired.toString(),\n      amountBDesired.toString(),\n      amountOut.toString(),\n    ];\n  } else {\n    let [amountBOptimal, amountOut] = quote(amountADesired, reserveA, reserveB);\n    if (amountBOptimal <= amountBDesired) {\n      return [\n        amountADesired.toString(),\n        amountBOptimal.toString(),\n        amountOut.toString(),\n      ];\n    } else {\n      let [amountAOptimal, amountOut] = quote(\n        amountBDesired,\n        reserveB,\n        reserveA\n      );\n      console.log(amountAOptimal, amountOut);\n      return [\n        amountAOptimal.toString(),\n        amountBDesired.toString(),\n        amountOut.toString(),\n      ];\n    }\n  }\n}\n\n// Function used to get a quote of the liquidity removal\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteRemoveLiquidity(\n  address1,\n  address2,\n  liquidity,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  console.log(\"pair address\", pairAddress);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  const feeOn =\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\n\n  const _kLast = await pair.kLast();\n  const kLast = Number(ethers.utils.formatEther(_kLast));\n\n  const _totalSupply = await pair.totalSupply();\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n\n  if (feeOn && kLast > 0) {\n    const feeLiquidity =\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\n    totalSupply = totalSupply + feeLiquidity;\n  }\n\n  const Aout = (reserveA * liquidity) / totalSupply;\n  const Bout = (reserveB * liquidity) / totalSupply;\n\n  return [liquidity, Aout, Bout];\n}\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  getReserves, getOptionBalanceAndSymbol,\n} from \"../ethereumFunctions\";\n\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\n\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport * as COINS from \"../constants/coins\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n  const [router, setRouter] = React.useState(\n    getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer)\n  );\n  const [weth, setWeth] = React.useState(\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\n  );\n  const [factory, setFactory] = React.useState(\n    getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer)\n  );\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the user's balance of liquidity tokens for the current pair\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Used when getting a quote of liquidity\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    return (\n      coin1.address &&\n      coin2.address &&\n      validFloat.test(field1Value) &&\n      validFloat.test(field2Value) &&\n      parseFloat(field1Value) <= coin1.balance &&\n      parseFloat(field2Value) <= coin2.balance\n    );\n  };\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    addLiquidity(\n      coin1.address,\n      coin2.address,\n      parseFloat(field1Value),\n      parseFloat(field2Value),\n      0,\n      0,\n      router,\n      account,\n      signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });//\"Deployment Failed (\" + e.message + \")\", {\n        //  variant: \"error\",\n        //  autoHideDuration: 10000,\n       // });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (inp) => {\n    // Close the dialog window\n    setDialog1Open(false);\n    var isInsurer = inp !== undefined ? inp[1] : undefined;\n    var abbr = inp!== undefined ? inp[3] : undefined;\n    // If the user inputs the same token, we want to switch the data in the fields\n    // if (address === coin2.address) {\n    //   switchFields();\n    // }\n    // We only update the values if the user provides a token\n    // else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n    if (isInsurer!==undefined) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getOptionBalanceAndSymbol(isInsurer, account, router.address, provider, signer).then((data) => {\n        setCoin1({\n          isCoin: false,\n          isInsurer: isInsurer,\n          address: undefined,\n          symbol: abbr,\n          balance: data.balance,\n        });\n      });\n    }\n    // }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && account) {\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, account, factory, signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity deployment.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n\n      quoteAddLiquidity(\n        coin1.address,\n        coin2.address,\n        parseFloat(field1Value),\n        parseFloat(field2Value),\n        factory,\n        signer\n      ).then((data) => {\n        // console.log(data);\n        console.log(\"TokenA in: \", data[0]);\n        console.log(\"TokenB in: \", data[1]);\n        console.log(\"Liquidity out: \", data[2]);\n        setLiquidityOut([data[0], data[1], data[2]]);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, field2Value, factory, signer]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1 && account) {\n        getBalanceAndSymbol(account, coin1.address, provider, signer).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2 && account) {\n        getBalanceAndSymbol(account, coin2.address, provider, signer).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  useEffect(() => {\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n\n    getAccount().then((account) => {\n      setAccount(account);\n    });\n  });\n\n  return (\n    <div>\n      {/* Liquidity deployer */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={COINS.ALLCONTRACTS}\n        signer={signer}\n        heading = {\"Select Oracle\"}\n        isPasteAddress = {true}\n      />\n      {/*<CoinDialog*/}\n      {/*  open={dialog2Open}*/}\n      {/*  onClose={onToken2Selected}*/}\n      {/*  coins={COINS.ALL}*/}\n      {/*  signer={signer}*/}\n      {/*/>*/}\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n            placeholder = {\"deadline in days\"}\n          />\n        </Grid>\n\n        {/*<Grid item xs={12} className={classes.fullWidth}>*/}\n        {/*  <CoinField*/}\n        {/*    activeField={true}*/}\n        {/*    value={field2Value}*/}\n        {/*    onClick={() => setDialog2Open(true)}*/}\n        {/*    onChange={handleChange.field2}*/}\n        {/*    symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}*/}\n        {/*  />*/}\n        {/*</Grid>*/}\n      </Grid>\n\n      {/*<Grid*/}\n      {/*  container*/}\n      {/*  direction=\"row\"*/}\n      {/*  alignItems=\"center\"*/}\n      {/*  justifyContent=\"center\"*/}\n      {/*  spacing={4}*/}\n      {/*  className={classes.balance}*/}\n      {/*>*/}\n        {/*<hr className={classes.hr} />*/}\n        {/*<Grid*/}\n        {/*  container*/}\n        {/*  item*/}\n        {/*  className={classes.values}*/}\n        {/*  direction=\"column\"*/}\n        {/*  alignItems=\"center\"*/}\n        {/*  spacing={2}*/}\n        {/*>*/}\n        {/*  /!* Balance Display *!/*/}\n        {/*  <Typography variant=\"h6\">Your Balances</Typography>*/}\n        {/*  <Grid container direction=\"row\" justifyContent=\"space-between\">*/}\n        {/*    <Grid item xs={6}>*/}\n        {/*      <Typography variant=\"body1\" className={classes.balance}>*/}\n        {/*        {formatBalance(coin1.balance, coin1.symbol)}*/}\n        {/*      </Typography>*/}\n        {/*    </Grid>*/}\n        {/*    <Grid item xs={6}>*/}\n        {/*      <Typography variant=\"body1\" className={classes.balance}>*/}\n        {/*        {formatBalance(coin2.balance, coin2.symbol)}*/}\n        {/*      </Typography>*/}\n        {/*    </Grid>*/}\n        {/*  </Grid>*/}\n\n        {/*  <hr className={classes.hr} />*/}\n\n        {/*  /!* Reserves Display *!/*/}\n        {/*  <Typography variant=\"h6\">Reserves</Typography>*/}\n        {/*  <Grid container direction=\"row\" justifyContent=\"space-between\">*/}\n        {/*    <Grid item xs={6}>*/}\n        {/*      <Typography variant=\"body1\" className={classes.balance}>*/}\n        {/*        {formatReserve(reserves[0], coin1.symbol)}*/}\n        {/*      </Typography>*/}\n        {/*    </Grid>*/}\n        {/*    <Grid item xs={6}>*/}\n        {/*      <Typography variant=\"body1\" className={classes.balance}>*/}\n        {/*        {formatReserve(reserves[1], coin2.symbol)}*/}\n        {/*      </Typography>*/}\n        {/*    </Grid>*/}\n        {/*  </Grid>*/}\n\n        {/*  <hr className={classes.hr} />*/}\n\n        {/*  /!* Liquidity Tokens Display *!/*/}\n        {/*  <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>*/}\n        {/*  <Grid container direction=\"row\" justifyContent=\"center\">*/}\n        {/*    <Grid item xs={6}>*/}\n        {/*      <Typography variant=\"body1\" className={classes.balance}>*/}\n        {/*        {formatReserve(liquidityTokens, \"UNI-V2\")}*/}\n        {/*      </Typography>*/}\n        {/*    </Grid>*/}\n        {/*  </Grid>*/}\n        {/*</Grid>*/}\n        {/*<Paper className={classes.paperContainer}>*/}\n        {/*  /!*Red  Display to show the quote *!/*/}\n        {/*  <Grid*/}\n        {/*    container*/}\n        {/*    item*/}\n        {/*    direction=\"column\"*/}\n        {/*    alignItems=\"center\"*/}\n        {/*    spacing={2}*/}\n        {/*    className={classes.fullWidth}*/}\n        {/*  >*/}\n        {/*    /!* Tokens in *!/*/}\n        {/*    <Typography variant=\"h6\">Tokens in</Typography>*/}\n        {/*    <Grid container direction=\"row\" justifyContent=\"space-between\">*/}\n        {/*      <Grid item xs={6}>*/}\n        {/*        <Typography variant=\"body1\" className={classes.balance}>*/}\n        {/*          {formatBalance(liquidityOut[0], coin1.symbol)}*/}\n        {/*        </Typography>*/}\n        {/*      </Grid>*/}\n        {/*      <Grid item xs={6}>*/}\n        {/*        <Typography variant=\"body1\" className={classes.balance}>*/}\n        {/*          {formatBalance(liquidityOut[1], coin2.symbol)}*/}\n        {/*        </Typography>*/}\n        {/*      </Grid>*/}\n        {/*    </Grid>*/}\n\n        {/*    <hr className={classes.hr} />*/}\n\n        {/*    /!* Liquidity Tokens Display *!/*/}\n        {/*    <Typography variant=\"h6\">Liquidity Pool Tokens Out</Typography>*/}\n        {/*    <Grid container direction=\"row\" justifyContent=\"center\">*/}\n        {/*      <Grid item xs={6}>*/}\n        {/*        <Typography variant=\"body1\" className={classes.balance}>*/}\n        {/*          {formatReserve(liquidityOut[2], \"UNI-V2\")}*/}\n        {/*        </Typography>*/}\n        {/*      </Grid>*/}\n        {/*    </Grid>*/}\n        {/*  </Grid>*/}\n        {/*</Paper>*/}\n\n        {/*<hr className={classes.hr} />*/}\n      {/*</Grid>*/}\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={true}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityDeployer;\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\nimport {\n  RemoveLiquidityField1,\n  RemoveLiquidityField2,\n} from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport * as COINS from \"../constants/coins\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityRemover(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n  const [router, setRouter] = React.useState(\n    getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer)\n  );\n  const [weth, setWeth] = React.useState(\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\n  );\n  const [factory, setFactory] = React.useState(\n    getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer)\n  );\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the liquidity tokens balance of the user\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Stores the input and output for the liquidity removal preview\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    return (\n      coin1.address &&\n      coin2.address &&\n      validFloat.test(field1Value) &&\n      parseFloat(field1Value) <= liquidityTokens\n    );\n  };\n\n  const remove = () => {\n    console.log(\"Attempting to remove liquidity...\");\n    setLoading(true);\n\n    removeLiquidity(\n      coin1.address,\n      coin2.address,\n      parseFloat(field1Value),\n      0,\n      0,\n      router,\n      account,\n      signer,\n      factory\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && account) {\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, account, factory, signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity removal.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity removal\");\n      quoteRemoveLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        factory,\n        signer\n      ).then((data) => {\n        console.log(data);\n        setTokensOut(data);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, factory, signer]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1 && account) {\n        getBalanceAndSymbol(account, coin1.address, provider, signer).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2 && account) {\n        getBalanceAndSymbol(account, coin2.address, provider, signer).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  useEffect(() => {\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n\n    getAccount().then((account) => {\n      setAccount(account);\n    });\n  });\n\n  return (\n    <div>\n      {/* Coin Swapper */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField1\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField2\n            activeField={true}\n            onClick={() => setDialog2Open(true)}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[0], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[1], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[2], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n        <hr className={classes.hr} />\n      </Grid>\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={remove}\n        >\n          <ArrowDownwardIcon className={classes.buttonIcon} />\n          Remove\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityRemover;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport StepConnector, { stepConnectorClasses } from '@mui/material/StepConnector';\nimport { styled } from '@mui/material/styles';\nimport Check from '@mui/icons-material/Check';\nimport PropTypes from 'prop-types';\n\nconst QontoConnector = styled(StepConnector)(({ theme }) => ({\n    [`&.${stepConnectorClasses.alternativeLabel}`]: {\n        top: 10,\n        left: 'calc(-50% + 16px)',\n        right: 'calc(50% + 16px)',\n    },\n    [`&.${stepConnectorClasses.active}`]: {\n        [`& .${stepConnectorClasses.line}`]: {\n            borderColor: '#784af4',\n        },\n    },\n    [`&.${stepConnectorClasses.completed}`]: {\n        [`& .${stepConnectorClasses.line}`]: {\n            borderColor: '#784af4',\n        },\n    },\n    [`& .${stepConnectorClasses.line}`]: {\n        borderColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\n        borderTopWidth: 3,\n        borderRadius: 1,\n    },\n}));\n\nconst QontoStepIconRoot = styled('div')(({ theme, ownerState }) => ({\n    color: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#eaeaf0',\n    display: 'flex',\n    height: 22,\n    alignItems: 'center',\n    ...(ownerState.active && {\n        color: '#784af4',\n    }),\n    '& .QontoStepIcon-completedIcon': {\n        color: '#784af4',\n        zIndex: 1,\n        fontSize: 18,\n    },\n    '& .QontoStepIcon-circle': {\n        width: 8,\n        height: 8,\n        borderRadius: '50%',\n        backgroundColor: 'currentColor',\n    },\n}));\n\nfunction QontoStepIcon(props) {\n    const { active, completed, className } = props;\n\n    return (\n        <QontoStepIconRoot ownerState={{ active }} className={className}>\n            {completed ? (\n                <Check className=\"QontoStepIcon-completedIcon\" />\n            ) : (\n                <div className=\"QontoStepIcon-circle\" />\n            )}\n        </QontoStepIconRoot>\n    );\n}\n\nQontoStepIcon.propTypes = {\n    /**\n     * Whether this step is active.\n     * @default false\n     */\n    active: PropTypes.bool,\n    className: PropTypes.string,\n    /**\n     * Mark the step as completed. Is passed to child components.\n     * @default false\n     */\n    completed: PropTypes.bool,\n};\n\nconst steps = ['Select Oracle Id', 'Select available asset (you want to deal in)', 'Select available deadline', 'Provide liquidity amount'];\n\nexport default function HorizontalLinearStepper(props) {\n    const {activeStep, ...other} = props;\n\n    return (\n        <Box sx={{ width: '58%',ml: 70, mb: 1}}>\n            <Stepper alternativeLabel activeStep={activeStep} connector={<QontoConnector />}>\n                {steps.map((label, index) => {\n                    const stepProps = {};\n                    const labelProps = {};\n                    return (\n                        <Step key={label} {...stepProps}>\n                            <StepLabel  StepIconComponent={QontoStepIcon} {...labelProps}>{label}</StepLabel>\n                        </Step>\n                    );\n                })}\n            </Stepper>\n            {activeStep === steps.length ? (\n                <React.Fragment>\n                    <Typography sx={{ mt: 2, mb: 1 }}>\n                        All steps completed - you can get insured now.\n                    </Typography>\n                    <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n                        <Box sx={{ flex: '1 1 auto' }} />\n                    </Box>\n                </React.Fragment>\n            ) : (\n                <React.Fragment>\n                    <Typography sx={{ mt: 2, mb: 1 }}>Step {activeStep + 1}</Typography>\n                    <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n                        <Box sx={{ flex: '1 1 auto' }} />\n\n                    </Box>\n                </React.Fragment>\n            )}\n        </Box>\n    );\n}","import React, { useEffect } from \"react\";\nimport {\n    Container,\n    Grid,\n    IconButton,\n    makeStyles,\n    Paper,\n    Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport AlarmIcon from \"@material-ui/icons/Alarm\";\nimport {\n    getAccount,\n    getFactory,\n    getProvider,\n    getRouter,\n    getCore,\n    getEvent,\n    getSigner,\n    getAmountOut,\n    getBalanceAndSymbol,\n    getWeth,\n    swapTokens,\n    getReserves, getOptionBalanceAndSymbol, stake, withdraw, trigger, mint, burn, redeem\n} from \"../ethereumFunctions\";\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport SplitButton from \"../Components/SplitButton\";\nimport InputField from \"./components/InputField\";\nimport InputDialog from \"../CoinSwapper/InputDialog\";\nimport * as COINS from \"../constants/coins\";\nimport {symbol} from \"prop-types\";\nimport HorizontalLinearStepper from \"./components/Stepper\";\nimport * as EVENTS from \"../constants/events\";\n\nconst styles = (theme) => ({\n    paperContainer: {\n        borderRadius: theme.spacing(2),\n        padding: theme.spacing(1),\n        paddingBottom: theme.spacing(3),\n        backgroundColor: '#dfe1f5'\n    },\n    switchButton: {\n        zIndex: 1,\n        margin: \"-16px\",\n        padding: theme.spacing(0.5),\n    },\n    fullWidth: {\n        width: \"100%\",\n    },\n    title: {\n        textAlign: \"center\",\n        padding: theme.spacing(0.5),\n        marginBottom: theme.spacing(1),\n    },\n    hr: {\n        width: \"100%\",\n    },\n    balance: {\n        padding: theme.spacing(1),\n        overflow: \"wrap\",\n        textAlign: \"center\",\n    },\n    footer: {\n        marginTop: \"285px\",\n    },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction MintBurnLiquid(props) {\n    const classes = useStyles();\n    const { enqueueSnackbar } = useSnackbar();\n\n    // Stores information for the insurance smart contracts\n\n    const [provider, setProvider] = React.useState(getProvider());\n    const [signer, setSigner] = React.useState(getSigner(provider));\n    const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n\n    const [coreAddress, setCoreAddress] = React.useState(\n        \"0xde68D58ba403be67703B903c99932A854A233dEF\"\n    );\n    const [eventAddress, setEventAddress] = React.useState(\n        \"0xE55CC35bF4A71564B68A12dAA2391215bd520BdF\"\n    );\n\n    // Stores a record of whether their respective dialog window is open\n    const [dialog1Open, setDialog1Open] = React.useState(false);\n    const [dialog2Open, setDialog2Open] = React.useState(false);\n    const [dialog3Open, setDialog3Open] = React.useState(false);\n\n    const [activeStep, setActiveStep] = React.useState(0);\n\n    // Stores the current value of their respective text box\n    const [field1Value, setField1Value] = React.useState(\"\");\n    const [field2Value, setField2Value] = React.useState(\"\");\n    const [field3Value, setField3Value] = React.useState(\"\");\n    const [field4Value, setField4Value] = React.useState(\"\");\n\n\n    // Controls the loading button\n    const [loading, setLoading] = React.useState(false);\n    // Stores data about their respective inputs to fetch correct event\n    const [input1, setInput1] = React.useState({\n        isSelected: false,\n        index: undefined,\n        name: undefined,\n    });\n\n    const [input2, setInput2] = React.useState({\n        isSelected: false,\n        index: undefined,\n        name: undefined,\n    });\n\n    const [input3, setInput3] = React.useState({\n        isSelected: false,\n        index: undefined,\n        name: undefined,\n    });\n\n\n    // These functions take an HTML event, pull the data out and puts it into a state variable.\n    const handleChange = {\n        field1: (e) => {\n            setField1Value(e.target.value);\n        },\n\n            field4: (e) => {\n                setField4Value(e.target.value);\n                setActiveStep(4);\n            },\n\n    };\n\n    // Turns the account's balance into something nice and readable\n    const formatBalance = (balance, symbol) => {\n        if (balance && symbol)\n            return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n        else return \"0.0\";\n    };\n\n    // Turns the coin's reserves into something nice and readable\n    // const formatReserve = (reserve, symbol) => {\n    //     if (reserve && symbol) return reserve + \" \" + symbol;\n    //     else return \"0.0\";\n    // };\n\n    // Determines whether the button should be enabled or not\n    // const isButtonEnabled = () => {\n    //     let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n    //\n    //     // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    //     return (\n    //         coin1.address &&\n    //         coin2.address &&\n    //         validFloat.test(field1Value) &&\n    //         parseFloat(field1Value) <= coin1.balance\n    //     );\n    // };\n\n    // Called when the dialog window for input1 exits\n\n    const onInput1Selected = (inp) => {\n        // Close the dialog window\n        setDialog1Open(false);\n\n        // We only update the values if the user provides a token\n\n        // Getting some token data is async, so we need to wait for the data to return, hence the promise\n        if (inp !== undefined) {\n            setInput1(\n                {\n                    isSelected: true,\n                    name: inp[0],\n                    index: inp[1],\n                }\n            );\n            setField1Value(\n                \"Oracle: \"+inp[0]\n            )\n            setActiveStep(1);\n        }\n\n    };\n    const onInput2Selected = (inp) => {\n        // Close the dialog window\n        setDialog2Open(false);\n\n        // We only update the values if the user provides a token\n\n        // Getting some token data is async, so we need to wait for the data to return, hence the promise\n        if (inp !== undefined) {\n            setInput2(\n                {\n                    isSelected: true,\n                    name: inp[0],\n                    index: inp[1],\n                }\n            );\n            setField2Value(\n                \"Asset: \" +inp[0]\n            )\n            setActiveStep(2);\n        }\n\n    };\n\n    const onInput3Selected = (inp) => {\n        // Close the dialog window\n        setDialog3Open(false);\n\n        // We only update the values if the user provides a token\n\n        // Getting some token data is async, so we need to wait for the data to return, hence the promise\n        if (inp !== undefined) {\n            setInput3(\n                {\n                    isSelected: true,\n                    name: inp[0],\n                    index: inp[1],\n                }\n            );\n            setField3Value(\n                \"Deadline: \"+inp[0]\n            )\n            setEventAddress(inp[2].event)\n            setActiveStep(3);\n        }\n\n    };\n\n    const mintOption = () => {\n        console.log(\"Attempting to stake...\");\n        console.log(provider);\n        console.log(signer.getAddress());\n        setLoading(true);\n\n        mint(\n            parseFloat(field4Value),\n            coreAddress,\n            eventAddress,\n            signer\n        )\n            .then(() => {\n                setLoading(false);\n\n                // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n                setField1Value(\"\");\n                enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n            })\n            .catch((e) => {\n                setLoading(false);\n                enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n                    variant: \"error\",\n                    autoHideDuration: 10000,\n                });\n            });\n    };\n    const burnOption = () => {\n        console.log(\"Attempting to stake...\");\n        console.log(provider);\n        console.log(signer.getAddress());\n        setLoading(true);\n\n        burn(\n            parseFloat(field4Value),\n            coreAddress,\n            eventAddress,\n            signer\n        )\n            .then(() => {\n                setLoading(false);\n\n                // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n                setField1Value(\"\");\n                enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n            })\n            .catch((e) => {\n                setLoading(false);\n                enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n                    variant: \"error\",\n                    autoHideDuration: 10000,\n                });\n            });\n    };\n    const redeemOption = () => {\n        console.log(\"Attempting to stake...\");\n        console.log(provider);\n        console.log(signer.getAddress());\n        setLoading(true);\n\n        redeem(\n            parseFloat(field4Value),\n            coreAddress,\n            eventAddress,\n            signer\n        )\n            .then(() => {\n                setLoading(false);\n\n                // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n                setField1Value(\"\");\n                enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n            })\n            .catch((e) => {\n                setLoading(false);\n                enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n                    variant: \"error\",\n                    autoHideDuration: 10000,\n                });\n            });\n    };\n\n    // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n    // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n    // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n    // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n    // of the two coins change.\n\n    // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n    // This means that when the user selects a different coin to convert between, or the coins are swapped,\n    // the new reserves will be calculated.\n    // useEffect(() => {\n    //     console.log(\n    //         \"Trying to get Reserves between:\\n\" + option1.address + \"\\n\" + option2.address\n    //     );\n    //\n    //     if (option1.address) {\n    //         getReserves(option1.address, option2.address, eventAddress, signer, account).then(\n    //             (data) => setReserves(data)\n    //         );\n    //     }\n    // }, [option1.address, option2.address, account, factory, router, signer]);\n\n    // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n    // It attempts to calculate and set the state variable `field2Value`\n    // This means that if the user types a new value into the conversion box or the conversion rate changes,\n    // the value in the output box will change.\n    // useEffect(() => {\n    //     if (isNaN(parseFloat(field1Value))) {\n    //         setField2Value(\"\");\n    //     } else if (reserves[0] && reserves[1]) {\n    //         if (option2.isInsurer){\n    //             setField2Value(`${100*reserves[1]/reserves[0]}%`);\n    //         }else{\n    //             setField2Value(`${100*reserves[0]/reserves[1]}%`);\n    //\n    //         }\n    //\n    //         // getAmountOut(coin1.address, coin2.address, field1Value, router).then(\n    //         //   (amount) => setField2Value(amount.toFixed(7))\n    //         // );\n    //     } else {\n    //         setField2Value(\"\");\n    //     }\n    // }, [field1Value, coin1.address, coin2.address]);\n\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n    // useEffect(() => {\n    //     const coinTimeout = setTimeout(() => {\n    //         console.log(\"Checking balances...\");\n    //\n    //         if (option1.address) {\n    //             getReserves(\n    //                 option1.address,\n    //                 coin2.address,\n    //                 eventAddress,\n    //                 signer,\n    //                 account\n    //             ).then((data) => setReserves(data));\n    //         }\n    //\n    //         if (option1.address) {\n    //             getOptionBalanceAndSymbol(option2.isInsurer, account, eventAddress, provider, signer).then(\n    //                 (data) => {\n    //                     setOption2({\n    //                         isCoin: false,\n    //                         isInsurer: option2.isInsurer,\n    //                         address: undefined,\n    //                         symbol: option2.symbol,\n    //                         balance: data.balance,\n    //                     });\n    //                 }\n    //             );\n    //         }\n    //         if (coin2 && account) {\n    //             getBalanceAndSymbol(account, coin2.address, provider, signer).then(\n    //                 (data) => {\n    //                     setCoin2({\n    //                         ...coin2,\n    //                         balance: data.balance,\n    //                     });\n    //                 }\n    //             );\n    //         }\n    //     }, 5000);\n    //\n    //     return () => clearTimeout(coinTimeout);\n    // });\n\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n    // useEffect(() => {\n    //     getAccount().then((account) => {\n    //         setAccount(account);\n    //     });\n    // });\n\n    return (\n        <div>\n            <HorizontalLinearStepper\n                activeStep = {activeStep}\n            />\n            {/* Dialog Windows */}\n            <InputDialog\n                open={dialog1Open}\n                onClose={onInput1Selected}\n                events={EVENTS.ALLEVENTS}\n                signer={signer}\n                heading = {\"Select Oracle ID\"}\n                isPasteAddress = {false}\n            />\n            <InputDialog\n                open={dialog2Open}\n                onClose={onInput2Selected}\n                events={input1.isSelected ? EVENTS.ALLEVENTS[input1.index].array : []}\n                signer={signer}\n                heading = {\"Select asset\"}\n                isPasteAddress = {false}\n            />\n            <InputDialog\n                open={dialog3Open}\n                onClose={onInput3Selected}\n                events={input2.isSelected ? EVENTS.ALLEVENTS[input1.index].array[input2.index].array : []}\n                signer={signer}\n                heading = {\"Select deadline\"}\n                isPasteAddress = {false}\n            />\n\n            {/* Manage insurance box */}\n            <Container maxWidth=\"sm\">\n                <Paper className={classes.paperContainer}>\n                    <Typography variant=\"h5\" className={classes.title}>\n                        How you doin today?\n                    </Typography>\n\n                    <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n                        <Grid item xs={12} className={classes.fullWidth}>\n                            <CoinField\n                                activeField={true}\n                                value={field1Value}\n                                onClick={() => setDialog1Open(true)}\n                                placeholder={\"Select Oracle Id\"}\n                                symbol={input1.isSelected !== false ? \"Done\" : \"Select\"}\n                            />\n                        </Grid>\n\n\n                        <Grid item xs={12} className={classes.fullWidth}>\n                            <CoinField\n                                activeField={true}\n                                value={field2Value}\n                                onClick={() => setDialog2Open(true)}\n                                placeholder={\"Select asset\"}\n                                symbol={input2.isSelected !== false ? \"Done\" : \"Select\"}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12} className={classes.fullWidth}>\n                            <CoinField\n                                activeField={true}\n                                value={field3Value}\n                                onClick={() => setDialog3Open(true)}\n                                placeholder={\"Select deadline\"}\n                                symbol={input3.isSelected !== false ? \"Done\" : \"Select\"}\n                            />\n                        </Grid>\n                        <Grid item xs={12} className={classes.fullWidth}>\n                            <InputField\n                                activeField={true}\n                                value={field4Value}\n                                onClick={() => setDialog3Open(true)}\n                                onChange={handleChange.field4}\n                                placeholder={\"Enter amount $\"}\n                            />\n                        </Grid>\n\n                        <hr className={classes.hr} />\n\n                        {/* Balance Display */}\n                        <Typography variant=\"h6\">Your Balance</Typography>\n\n                        <Typography variant=\"body1\" className={classes.balance}>\n                            {/*{formatBalance(option2.balance, option1.symbol)}*/} TODO\n                        </Typography>\n\n\n                        <hr className={classes.hr} />\n\n                        <SplitButton\n                            onClick={[mintOption, burnOption, redeemOption, burnOption]}\n                            options = {['Mint','Burn','Redeem','Provide Liquidity']}\n                        >\n\n                        </SplitButton>\n\n                    </Grid>\n                </Paper>\n            </Container>\n\n            <Grid\n                container\n                className={classes.footer}\n                direction=\"row\"\n                justifyContent=\"center\"\n                alignItems=\"flex-end\"\n            >\n                <p>\n                    @Becoz-we-can labs\n                </p>\n            </Grid>\n        </div>\n    );\n}\n\nexport default MintBurnLiquid;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nimport SwitchButton from \"./SwitchButton\";\nimport LiquidityDeployer from \"./LiquidityDeployer\";\nimport LiquidityRemover from \"./RemoveLiquidity\";\nimport MintBurnLiquid from \"./MintBurnLiquidity\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction Liquidity() {\n  const classes = useStyles();\n\n  const [deploy, setDeploy] = React.useState(true);\n\n  const deploy_or_remove = (deploy) => {\n    if (deploy === true) {\n      return <MintBurnLiquid />\n      // return <LiquidityDeployer />;\n    }\n    return <LiquidityRemover />;\n  };\n\n  return (\n    <div>\n      <MintBurnLiquid />\n    </div>\n  );\n}\n\nexport default Liquidity;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport logo from \"../assets/img/logo.svg\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n    marginTop: \"200px\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction ConnectWalletPage() {\n  const classes = useStyles();\n  return (\n    <div>\n      <div className=\"Title\">\n        <h1 className=\"navbar-logo\">\n          <img src={logo} className=\"logo\"></img>\n        </h1>\n      </div>\n\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography\n            variant=\"h6\"\n            className={classes.title}\n            color=\"common.white\"\n          >\n            Please connect an Ethereum wallet to your browser to use the\n            application\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Clearmatics Autonity Uniswap | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default ConnectWalletPage;\n","import { Contract, ethers } from \"ethers\";\nimport * as COINS from \"../constants/coins\";\n\nimport { fetchReserves } from \"../ethereumFunctions\";\n\nconst ERC20 = require(\"../build/ERC20.json\");\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\n\n// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's coin to add\n//    `amount2` - A float or similar number representing the value of address2's coin to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function addLiquidity(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const amountIn1 = ethers.utils.parseEther(amount1.toString());\n  const amountIn2 = ethers.utils.parseEther(amount2.toString());\n\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  await token1.approve(routerContract.address, amountIn1);\n  await token2.approve(routerContract.address, amountIn2);\n\n  console.log([\n    address1,\n    address2,\n    Number(amountIn1),\n    Number(amountIn2),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth + Token\n    await routerContract.addLiquidityETH(\n      address2,\n      amountIn2,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline,\n      { value: amountIn1 }\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token + Eth\n    await routerContract.addLiquidityETH(\n      address1,\n      amountIn1,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline,\n      { value: amountIn2 }\n    );\n  } else {\n    // Token + Token\n    await routerContract.addLiquidity(\n      address1,\n      address2,\n      amountIn1,\n      amountIn2,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\n// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function removeLiquidity(\n  address1,\n  address2,\n  liquidity_tokens,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer,\n  factory\n) {\n  const liquidity = ethers.utils.parseEther(liquidity_tokens.toString());\n\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  await pair.approve(routerContract.address, liquidity);\n\n  console.log([\n    address1,\n    address2,\n    Number(liquidity),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth + Token\n    await routerContract.removeLiquidityETH(\n      address2,\n      liquidity,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token + Eth\n    await routerContract.removeLiquidityETH(\n      address1,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  } else {\n    // Token + Token\n    await routerContract.removeLiquidity(\n      address1,\n      address2,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\nconst quote = (amount1, reserve1, reserve2) => {\n  const amount2 = amount1 * (reserve2 / reserve1);\n  const amountOut = Math.sqrt(amount2 * amount1);\n  return [amount2, amountOut];\n};\n\n// Function used to get a quote of the liquidity addition\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteAddLiquidity(\n  address1,\n  address2,\n  amountADesired,\n  amountBDesired,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  if (reserveA === 0 && reserveB === 0) {\n    let amountOut = Math.sqrt(reserveA * reserveB);\n    return [\n      amountADesired.toString(),\n      amountBDesired.toString(),\n      amountOut.toString(),\n    ];\n  } else {\n    let [amountBOptimal, amountOut] = quote(amountADesired, reserveA, reserveB);\n    if (amountBOptimal <= amountBDesired) {\n      return [\n        amountADesired.toString(),\n        amountBOptimal.toString(),\n        amountOut.toString(),\n      ];\n    } else {\n      let [amountAOptimal, amountOut] = quote(\n        amountBDesired,\n        reserveB,\n        reserveA\n      );\n      console.log(amountAOptimal, amountOut);\n      return [\n        amountAOptimal.toString(),\n        amountBDesired.toString(),\n        amountOut.toString(),\n      ];\n    }\n  }\n}\n\n// Function used to get a quote of the liquidity removal\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteRemoveLiquidity(\n  address1,\n  address2,\n  liquidity,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  console.log(\"pair address\", pairAddress);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  const feeOn =\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\n\n  const _kLast = await pair.kLast();\n  const kLast = Number(ethers.utils.formatEther(_kLast));\n\n  const _totalSupply = await pair.totalSupply();\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n\n  if (feeOn && kLast > 0) {\n    const feeLiquidity =\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\n    totalSupply = totalSupply + feeLiquidity;\n  }\n\n  const Aout = (reserveA * liquidity) / totalSupply;\n  const Bout = (reserveB * liquidity) / totalSupply;\n\n  return [liquidity, Aout, Bout];\n}\n","import React, { useEffect } from \"react\";\nimport {Container, Grid, makeStyles, Paper, Typography} from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  getReserves, getOptionBalanceAndSymbol, deployEvent\n} from \"../ethereumFunctions\";\n\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\n\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport InputField from \"../Liquidity/components/InputField\";\nimport * as COINS from \"../constants/coins\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  paperContainer1: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    backgroundColor: '#dfe1f5'\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction OracleDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n\n  const [weth, setWeth] = React.useState(\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\n  );\n\n  const [coreAddress, setCoreAddress] = React.useState(\n      \"0xde68D58ba403be67703B903c99932A854A233dEF\"\n  );\n\n\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n  const [field3Value, setField3Value] = React.useState(\"\");\n  const [field4Value, setField4Value] = React.useState(\"\");\n  const [field5Value, setField5Value] = React.useState(\"\");\n  const [field6Value, setField6Value] = React.useState(\"\");\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n   // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n    field3: (e) => {\n      setField3Value(e.target.value);\n    },\n    field4: (e) => {\n      setField4Value(e.target.value);\n    },\n    field5: (e) => {\n      setField5Value(e.target.value);\n    },\n    field6: (e) => {\n      setField6Value(e.target.value);\n    },\n  };\n\n  // // Turns the account's balance into something nice and readable\n  // const formatBalance = (balance, symbol) => {\n  //   if (balance && symbol)\n  //     return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n  //   else return \"0.0\";\n  // };\n  //\n  // // Turns the coin's reserves into something nice and readable\n  // const formatReserve = (reserve, symbol) => {\n  //   if (reserve && symbol) return reserve + \" \" + symbol;\n  //   else return \"0.0\";\n  // };\n  //\n  // // Determines whether the button should be enabled or not\n  // const isButtonEnabled = () => {\n  //   let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n  //\n  //   // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n  //   return (\n  //     coin1.address &&\n  //     coin2.address &&\n  //     validFloat.test(field1Value) &&\n  //     validFloat.test(field2Value) &&\n  //     parseFloat(field1Value) <= coin1.balance &&\n  //     parseFloat(field2Value) <= coin2.balance\n  //   );\n  // };\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    deployEvent(\n      field1Value,\n      field2Value,\n      field3Value,\n      field4Value,\n      parseFloat(field5Value),\n        parseFloat(field6Value),\n      coreAddress,\n      signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n         variant: \"error\",\n         autoHideDuration: 10000,\n       });\n      });\n  };\n\n\n\n  return (\n    <div>\n      {/* Oracle deployer */}\n      {/*<Container maxWidth=\"sm\" >*/}\n        <Paper className={classes.paperContainer1} >\n      <Typography variant=\"h5\" className={classes.title}>\n        Provide details about the insurance event:\n      </Typography>\n\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2} sm={\"auto\"} >\n        <Grid item xs={8} className={classes.fullWidth}>\n          <InputField\n              activeField={true}\n              value={field1Value}\n              onChange={handleChange.field1}\n              placeholder = {\"Name\"}\n          />\n        </Grid>\n\n        <Grid item xs={8} className={classes.fullWidth}>\n          <InputField\n              activeField={true}\n              value={field2Value}\n              onChange={handleChange.field2}\n              placeholder = {\"Duration\"}\n          />\n        </Grid>\n        <Grid item xs={8} className={classes.fullWidth}>\n          <InputField\n              activeField={true}\n              value={field3Value}\n              onChange={handleChange.field3}\n              placeholder = {\"Oracle address\"}\n          />\n        </Grid>\n        <Grid item xs={8} className={classes.fullWidth}>\n          <InputField\n              activeField={true}\n              value={field4Value}\n              onChange={handleChange.field4}\n              placeholder = {\"Asset address\"}\n          />\n        </Grid>\n        <Grid item xs={8} className={classes.fullWidth}>\n          <InputField\n              activeField={true}\n              value={field5Value}\n              onChange={handleChange.field5}\n              placeholder = {\"Settle ratio\"}\n          />\n        </Grid>\n        <Grid item xs={8} className={classes.fullWidth}>\n          <InputField\n              activeField={true}\n              value={field6Value}\n              onChange={handleChange.field6}\n              placeholder = {\"token ratio\"}\n          />\n        </Grid>\n      </Grid>\n          <hr className={classes.hr} />\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={true}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n        </Paper>\n      {/*</Container>*/}\n    </div>\n  );\n}\n\nexport default OracleDeployer;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nimport SwitchButton from \"./SwitchButton\";\nimport OracleDeployer from \"./OracleDeployer\";\n// import LiquidityRemover from \"./RemoveLiquidity\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction Oracle() {\n  const classes = useStyles();\n\n  const [deploy, setDeploy] = React.useState(true);\n\n  const deploy_or_remove = () => {\n\n    return <OracleDeployer />;\n\n  };\n\n  return (\n    <div>\n      <Container>\n        <Paper className={classes.paperContainer}>\n          {/*<Typography variant=\"h5\" className={classes.title}>*/}\n          {/*  <SwitchButton setDeploy={setDeploy} />*/}\n          {/*</Typography>*/}\n\n          {/*{deploy_or_remove(deploy)}*/}\n          {deploy_or_remove()}\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Becoz-we-can labs | Get ETH from the Ropsten testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Oracle;\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport {Link, Route} from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport {Component} from \"react\";\nimport NavBar from \"./NavBar\";\nimport CoinSwapper from \"../CoinSwapper/CoinSwapper\";\nimport {createTheme, ThemeProvider} from \"@material-ui/core\";\nimport {ethers} from \"ethers\";\nimport {SnackbarProvider} from \"notistack\";\nimport NarBar from \"./NavBar\";\nimport Oracle from \"../Oracle/Oracle\";\nimport Liquidity from \"../Liquidity/Liquidity\";\nimport ConnectWalletPage from \"../Components/connectWalletPage\";\n\nconst theme = createTheme({\n    palette: {\n        primary: {\n            light: '#757ce8',\n            main: '#3f50b5',\n            dark: '#002884',\n            contrastText: '#fff',\n        },\n        secondary: {\n            main: \"#9e9e9e\",\n            contrastText: \"#ffffff\",\n        },\n    },\n});\n\n\n\n\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`vertical-tabpanel-${index}`}\n            aria-labelledby={`vertical-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                // <Box sx={{ p: 3 }}>\n                    <div className=\"App\">\n                        <SnackbarProvider maxSnack={3}>\n                            <ThemeProvider theme={theme}>\n                                {/*<VerticalTabs/>*/}\n\n                                {/*<NarBar />*/}\n                                <Route\n                                    exact\n                                    path=\"/marketplace/\"\n                                    component={CoinSwapper}\n                                />\n                                <Route\n                                    exact\n                                    path=\"/oracle/\"\n                                    component={Oracle}\n                                />\n                                <Route\n                                    exact\n                                    path=\"/liquidity/\"\n                                    component={Liquidity}\n                                />\n                            </ThemeProvider>\n                        </SnackbarProvider>\n                    </div>\n                // </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\nexport default function VerticalTabs() {\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n        <Box\n            sx={{ flexGrow: 1, bgcolor: 'azure', display: 'flex', height:824 }}\n        >\n            <Tabs\n                orientation=\"vertical\"\n                variant=\"scrollable\"\n                centered\n                value={value}\n                onChange={handleChange}\n                aria-label=\"Vertical tabs example\"\n                sx={{ borderRight: 1, borderColor: 'divider' }}\n            >\n                {MenuItems.map((item, index) => {\n                    return (\n                        <Tab label ={item.title}\n                             className={item.cName}\n                             component = {Link}\n                             to = {item.url}\n                        />\n                        );\n                })\n                }\n\n            </Tabs>\n            <TabPanel value={value} index={0} >\n               children: {CoinSwapper}\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                Item Two\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n                Item Three\n            </TabPanel>\n\n        </Box>\n    );\n}\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Divider from '@mui/material/Divider';\nimport logo from \"../assets/img/logo.svg\";\nimport {MenuItems} from \"./MenuItems\";\nimport Tab from \"@mui/material/Tab\";\nimport {Link} from \"react-router-dom\";\n\nconst drawerWidth = 300;\n\nexport default function PermanentDrawerLeft() {\n    return (\n        // <div>\n        <Box\n            // sx={{ display: 'block' }}\n        >\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                sx={{ width: `calc(100% - ${drawerWidth}px)`, ml: `${drawerWidth}px` }}\n            >\n                <Toolbar>\n                    <Typography variant=\"h6\" noWrap component=\"div\">\n                        Decentralized insurance protocol\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                sx={{\n                    width: drawerWidth,\n                    flexShrink: 0,\n                    '& .MuiDrawer-paper': {\n                        width: drawerWidth,\n                        boxSizing: 'border-box',\n                    },\n                }}\n                variant=\"permanent\"\n                anchor=\"left\"\n            >\n                <Toolbar>\n                    {/*<div className=\"Title\">*/}\n                        <h2 className=\"navbar-logo\">\n                            <img src={logo} className=\"logo\" width = \"150\" ></img>\n                        </h2>\n                    {/*</div>*/}\n                </Toolbar>\n                <Divider />\n\n                {MenuItems.map((item, index) => {\n                    return (\n                        <Tab\n                            sx={{ typography: \"body1\", fontWeight: 'bold', fontSize: \"h6.fontSize\", fontFamily:\"monospace\", textTransform: \"capitalize\"}}\n                            label ={item.title}\n                             className={item.cName}\n                             component = {Link}\n                             to = {item.url}\n                        />\n                    );\n                })\n                }\n\n            </Drawer>\n            <Box\n                component=\"main\"\n                sx={{ flexGrow: 1, bgcolor: 'background.default', p: 3 }}\n            >\n                <Toolbar />\n\n            </Box>\n        </Box>\n        // </div>\n    );\n}","import React from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport NarBar from \"./NavBar/NavBar\";\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\nimport { Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport Liquidity from \"./Liquidity/Liquidity\";\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport Oracle from \"./Oracle/Oracle\";\nimport VerticalTabs from \"./NavBar/VerticalBar\"\nimport PermanentDrawerLeft from \"./NavBar/Drawer\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: '#757ce8',\n      main: '#3f50b5',\n      dark: '#002884',\n      contrastText: '#fff',\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\",\n    },\n  },\n});\n\nfunction App() {\n  // Check if wallet is here:\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    return (\n      <div className=\"App\">\n        <SnackbarProvider maxSnack={3}>\n          <ThemeProvider theme={theme}>\n            {/*<VerticalTabs/>*/}\n            <PermanentDrawerLeft />\n            {/*<NarBar />*/}\n            <Route\n              exact\n              path=\"/marketplace/\"\n              component={CoinSwapper}\n            />\n            <Route\n              exact\n              path=\"/oracle/\"\n              component={Oracle}\n            />\n            <Route\n                exact\n                path=\"/liquidity/\"\n                component={Liquidity}\n            />\n          </ThemeProvider>\n        </SnackbarProvider>\n      </div>\n    );\n  } catch (err) {\n    return (\n      <div className=\"App\">\n        <SnackbarProvider maxSnack={3}>\n          <ThemeProvider theme={theme}>\n            <ConnectWalletPage />\n          </ThemeProvider>\n        </SnackbarProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}